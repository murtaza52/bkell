foo
foo
foo
foo
DEBUG > FINAL http query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > result-hash... {:msg "Error", :dmsg "unknown protocol: xmldb"}
DEBUG > FINAL http query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > result-hash... {:msg "Error", :dmsg "unknown protocol: xmldb"}
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
Configuration problem: failed to load class for module http://exist-db.org/xquery/request; class: org.exist.xquery.functions.request.RequestModule; message: org.exist.xquery.functions.request.RequestModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/response; class: org.exist.xquery.functions.response.ResponseModule; message: org.exist.xquery.functions.response.ResponseModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/session; class: org.exist.xquery.functions.session.SessionModule; message: org.exist.xquery.functions.session.SessionModule
RESULT USER > result-hash... 
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user
leaf: group.test.user
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
parent: xmldb:exist:///exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
leaf: bookkeeping.main.bookkeeping
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
DEBUG > FINAL http query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > result-hash... {:msg "Error", :dmsg "unknown protocol: xmldb"}
DEBUG > FINAL http query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > result-hash... {:msg "Error", :dmsg "unknown protocol: xmldb"}
DEBUG > FINAL http query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
DEBUG > FINAL http query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
DEBUG > FINAL http query[xmldb:exist:///exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
DEBUG > FINAL http query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > result-hash... {:msg "Error", :dmsg "unknown protocol: xmldb"}
DEBUG > FINAL http query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > result-hash... {:msg "Error", :dmsg "unknown protocol: xmldb"}
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
Configuration problem: failed to load class for module http://exist-db.org/xquery/request; class: org.exist.xquery.functions.request.RequestModule; message: org.exist.xquery.functions.request.RequestModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/response; class: org.exist.xquery.functions.response.ResponseModule; message: org.exist.xquery.functions.response.ResponseModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/session; class: org.exist.xquery.functions.session.SessionModule; message: org.exist.xquery.functions.session.SessionModule
RESULT USER > result-hash... 
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user
leaf: group.test.user
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
parent: xmldb:exist:///exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
leaf: bookkeeping.main.bookkeeping
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
Configuration problem: failed to load class for module http://exist-db.org/xquery/request; class: org.exist.xquery.functions.request.RequestModule; message: org.exist.xquery.functions.request.RequestModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/response; class: org.exist.xquery.functions.response.ResponseModule; message: org.exist.xquery.functions.response.ResponseModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/session; class: org.exist.xquery.functions.session.SessionModule; message: org.exist.xquery.functions.session.SessionModule
RESULT USER > result-hash... 
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user
leaf: group.test.user
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
parent: xmldb:exist:///exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
leaf: bookkeeping.main.bookkeeping
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
Configuration problem: failed to load class for module http://exist-db.org/xquery/request; class: org.exist.xquery.functions.request.RequestModule; message: org.exist.xquery.functions.request.RequestModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/response; class: org.exist.xquery.functions.response.ResponseModule; message: org.exist.xquery.functions.response.ResponseModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/session; class: org.exist.xquery.functions.session.SessionModule; message: org.exist.xquery.functions.session.SessionModule
RESULT USER > result-hash... 
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user
leaf: group.test.user
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
parent: xmldb:exist:///exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
leaf: bookkeeping.main.bookkeeping
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user
leaf: group.test.user
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
parent: xmldb:exist:///exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
leaf: bookkeeping.main.bookkeeping
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
DEBUG > FINAL embedded query[xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
Configuration problem: failed to load class for module http://exist-db.org/xquery/request; class: org.exist.xquery.functions.request.RequestModule; message: org.exist.xquery.functions.request.RequestModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/response; class: org.exist.xquery.functions.response.ResponseModule; message: org.exist.xquery.functions.response.ResponseModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/session; class: org.exist.xquery.functions.session.SessionModule; message: org.exist.xquery.functions.session.SessionModule
RESULT USER > result-hash... 
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user
leaf: group.test.user
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
parent: xmldb:exist:///exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
leaf: bookkeeping.main.bookkeeping
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user
leaf: group.test.user
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
parent: xmldb:exist:///exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
leaf: bookkeeping.main.bookkeeping
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
parent: xmldb:exist:///exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user
leaf: user.test.user
RESULT USER > result-hash... 
Configuration problem: failed to load class for module http://exist-db.org/xquery/request; class: org.exist.xquery.functions.request.RequestModule; message: org.exist.xquery.functions.request.RequestModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/response; class: org.exist.xquery.functions.response.ResponseModule; message: org.exist.xquery.functions.response.ResponseModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/session; class: org.exist.xquery.functions.session.SessionModule; message: org.exist.xquery.functions.session.SessionModule
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
Configuration problem: failed to load class for module http://exist-db.org/xquery/request; class: org.exist.xquery.functions.request.RequestModule; message: org.exist.xquery.functions.request.RequestModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/response; class: org.exist.xquery.functions.response.ResponseModule; message: org.exist.xquery.functions.response.ResponseModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/session; class: org.exist.xquery.functions.session.SessionModule; message: org.exist.xquery.functions.session.SessionModule
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
Configuration problem: failed to load class for module http://exist-db.org/xquery/request; class: org.exist.xquery.functions.request.RequestModule; message: org.exist.xquery.functions.request.RequestModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/response; class: org.exist.xquery.functions.response.ResponseModule; message: org.exist.xquery.functions.response.ResponseModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/session; class: org.exist.xquery.functions.session.SessionModule; message: org.exist.xquery.functions.session.SessionModule
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
Configuration problem: failed to load class for module http://exist-db.org/xquery/request; class: org.exist.xquery.functions.request.RequestModule; message: org.exist.xquery.functions.request.RequestModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/response; class: org.exist.xquery.functions.response.ResponseModule; message: org.exist.xquery.functions.response.ResponseModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/session; class: org.exist.xquery.functions.session.SessionModule; message: org.exist.xquery.functions.session.SessionModule
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
Configuration problem: failed to load class for module http://exist-db.org/xquery/request; class: org.exist.xquery.functions.request.RequestModule; message: org.exist.xquery.functions.request.RequestModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/response; class: org.exist.xquery.functions.response.ResponseModule; message: org.exist.xquery.functions.response.ResponseModule
Configuration problem: failed to load class for module http://exist-db.org/xquery/session; class: org.exist.xquery.functions.session.SessionModule; message: org.exist.xquery.functions.session.SessionModule
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
check-user[false]
ADDING user[{:tag "user", :attrs {:id "test.user"}}]
...loading add.group.xml[{:tag :group, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "alternative.group", :name "alternative.group", :owner "root"}, :content nil}]
CREATing group [{:tag :group, :attrs {:id "user.test.user", :name "user.test.user", :owner "test.user"}, :content [{:tag :user, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "test.user"}}]}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
CREATing user [{:tag "user", :attrs {:id "test.user"}}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
RESULT USER > result-hash... 
check-user[false]
ADDING user[{:tag "user", :attrs {:id "test.user"}}]
...loading add.group.xml[{:tag :group, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "alternative.group", :name "alternative.group", :owner "root"}, :content nil}]
CREATing group [{:tag :group, :attrs {:id "user.test.user", :name "user.test.user", :owner "test.user"}, :content [{:tag :user, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "test.user"}}]}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
CREATing user [{:tag "user", :attrs {:id "test.user"}}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
RESULT USER > result-hash... 
RESULT USER > result-hash... 
RESULT USER > result-hash... 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Here 1
RESULT USER > result-hash... 
check-user[false]
ADDING user[{:tag "user", :attrs {:id "test.user"}}]
...loading add.group.xml[{:tag :group, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "alternative.group", :name "alternative.group", :owner "root"}, :content nil}]
CREATing group [{:tag :group, :attrs {:id "user.test.user", :name "user.test.user", :owner "test.user"}, :content [{:tag :user, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "test.user"}}]}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
Here 1
CREATing user [{:tag "user", :attrs {:id "test.user"}}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
Here 1
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
Here 1
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Here 1
RESULT USER > result-hash... 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Here 1
RESULT USER > result-hash... 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Here 1
RESULT USER > result-hash... 
check-user[false]
ADDING user[{:tag "user", :attrs {:id "test.user"}}]
...loading add.group.xml[{:tag :group, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "alternative.group", :name "alternative.group", :owner "root"}, :content nil}]
CREATing group [{:tag :group, :attrs {:id "user.test.user", :name "user.test.user", :owner "test.user"}, :content [{:tag :user, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "test.user"}}]}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
Here 1
CREATing user [{:tag "user", :attrs {:id "test.user"}}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
Here 1
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
Here 1
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Here 1
RESULT USER > result-hash... 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Here 1
RESULT USER > result-hash... 
check-user[false]
ADDING user[{:tag "user", :attrs {:id "test.user"}}]
...loading add.group.xml[{:tag :group, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "alternative.group", :name "alternative.group", :owner "root"}, :content nil}]
CREATing group [{:tag :group, :attrs {:id "user.test.user", :name "user.test.user", :owner "test.user"}, :content [{:tag :user, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "test.user"}}]}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
Here 1
CREATing user [{:tag "user", :attrs {:id "test.user"}}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
Here 1
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
Here 1
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Here 1
RESULT USER > result-hash... 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Here 1
RESULT USER > result-hash... 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Here 1
RESULT USER > result-hash... 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Here 1
Resource user.test.user not found
RESULT USER > result-hash... 
check-user[false]
ADDING user[{:tag "user", :attrs {:id "test.user"}}]
...loading add.group.xml[{:tag :group, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "alternative.group", :name "alternative.group", :owner "root"}, :content nil}]
CREATing group [{:tag :group, :attrs {:id "user.test.user", :name "user.test.user", :owner "test.user"}, :content [{:tag :user, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "test.user"}}]}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
Here 1
CREATing user [{:tag "user", :attrs {:id "test.user"}}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
Here 1
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
Here 1
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Here 1
Resource user.test.user not found
RESULT USER > result-hash... 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Here 1
Resource user.test.user not found
RESULT USER > result-hash... 
check-user[false]
ADDING user[{:tag "user", :attrs {:id "test.user"}}]
...loading add.group.xml[{:tag :group, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "alternative.group", :name "alternative.group", :owner "root"}, :content nil}]
CREATing group [{:tag :group, :attrs {:id "user.test.user", :name "user.test.user", :owner "test.user"}, :content [{:tag :user, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "test.user"}}]}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
Here 1
CREATing user [{:tag "user", :attrs {:id "test.user"}}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
Here 1
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
Here 1
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Here 1
Resource user.test.user not found
RESULT USER > result-hash... 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<fubar/>]
Here 1
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Here 1
Resource user.test.user not found
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<fubar/>]
Here 1
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<fubar/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<fubar/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > result-hash... org.exist.xmldb.LocalXMLResource@149494e
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Resource user.test.user not found
RESULT USER > result-hash... 
check-user[false]
ADDING user[{:tag "user", :attrs {:id "test.user"}}]
...loading add.group.xml[{:tag :group, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "alternative.group", :name "alternative.group", :owner "root"}, :content nil}]
CREATing group [{:tag :group, :attrs {:id "user.test.user", :name "user.test.user", :owner "test.user"}, :content [{:tag :user, :attrs {:xmlns "com/interrupt/bookkeeping/users", :id "test.user"}}]}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
CREATing user [{:tag "user", :attrs {:id "test.user"}}] / XML[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > result-hash... org.exist.xmldb.LocalXMLResource@1ab6c1c
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<fubar/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Resource user.test.user not found
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Resource user.test.user not found
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Resource user.test.user not found
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Resource user.test.user not found
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@1ce835b
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@1e2bda7
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@1672113
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@1ff83
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@1e2bda7
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@1ac7fbb
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@1ff83
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@1c6bbd3
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: org.exist.xmldb.LocalCollection@b1bed2
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: org.exist.xmldb.LocalCollection@17e6064
URI is not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest/exist/rest not found]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: org.exist.xmldb.LocalCollection@1ea817f
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@1ff83
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: org.exist.xmldb.LocalCollection@46fef3
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: 
URI is not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: 
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@943653
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: org.exist.xmldb.LocalCollection@ae8af4
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: 
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@1d3ac6e
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: org.exist.xmldb.LocalCollection@12e5ce6
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: 
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@1d3ac6e
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: org.exist.xmldb.LocalCollection@12e5ce6
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: 
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@168c1e1
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: org.exist.xmldb.LocalCollection@9c939
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: 
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@12e7234
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@4bd767
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeepingbookkeeping.main.bookkeeping not found]
URI not a resource, nil > Error type[class java.lang.IllegalArgumentException] > msg[No matching method found: getResource for class org.exist.xmldb.LocalCollection]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@12ae2bc
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: org.exist.xmldb.LocalCollection@1cee0c8
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: 
DELETE > URI[/exist/rest]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@ae8af4
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: org.exist.xmldb.LocalCollection@ce623f
DELETE > URI[/exist/rest]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: 
DELETE > URI[/exist/rest]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@bafda6
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@62ad0d
DELETE > URI[/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeepingbookkeeping.main.bookkeeping]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeepingbookkeeping.main.bookkeeping not found]
URI not a resource, nil > Error type[class java.lang.IllegalArgumentException] > msg[No matching method found: getResource for class org.exist.xmldb.LocalCollection]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@1cee0c8
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: org.exist.xmldb.LocalCollection@ef9525
DELETE > URI[/exist/rest]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: 
DELETE > URI[/exist/rest/]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@10c0ef2
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: org.exist.xmldb.LocalCollection@1781288
DELETE > URI[/exist/rest/]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: 
DELETE > URI[/exist/rest/]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@ce623f
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@19422d2
DELETE > URI[/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping not found]
URI not a resource, nil > Error type[class java.lang.IllegalArgumentException] > msg[No matching method found: getResource for class org.exist.xmldb.LocalCollection]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping
URL leaf: bookkeeping.main.bookkeeping
parent collection: org.exist.xmldb.LocalCollection@7a140f
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
URL parent: xmldb:exist:///db/exist/rest
URL leaf: 
parent collection: org.exist.xmldb.LocalCollection@f3e133
DELETE > URI[/exist/rest/]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping not found]
URI not a resource, nil > Error type[class java.lang.IllegalArgumentException] > msg[No matching method found: getResource for class org.exist.xmldb.LocalCollection]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping not found]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
Resource bookkeeping.main.bookkeeping not found
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping not found]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
Resource bookkeeping.main.bookkeeping not found
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > result-hash... 
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > result-hash... <user id="test.user"/>
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > result-hash... <user id="test.user"/>
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
... Getting user > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
... Getting user > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
... Getting user 2 > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
... Getting user 1 > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
... Getting user 2 > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
... Getting user 1 > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
Retrieved User[test-login] > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
Retrieved User[test-login] > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest not found]
URI not a resource, nil > Error type[class java.lang.NullPointerException] > msg[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml"}] > xml-content[<testContent/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping]
URI not a collection, trying resource > Error[class org.xmldb.api.base.XMLDBException] > msg[Collection /exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping not found]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[GET] > header-hash[{}] > xml-content[]
Resource bookkeeping.main.bookkeeping not found
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/] > http-method[DELETE] > header-hash[{}] > xml-content[]
DELETE > URI[/exist/rest/]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
Error type[class org.xmldb.api.base.XMLDBException] > msg[configuration error: cannot read data directory: /home/webkell/Projects/bkell/etc/exist/data]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
Error type[class org.xmldb.api.base.XMLDBException] > msg[configuration error: cannot read data directory: /home/webkell/Projects/bkell/etc/exist/data]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-existing-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-existing-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-existing-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-existing-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.new.user/group.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.new.user' name='user.new.user' owner='new.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='new.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='new.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.new.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.nd.user/user.nd.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-existing-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.new.user/group.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.new.user' name='user.new.user' owner='new.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='new.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='new.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.new.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.nd.user/user.nd.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-existing-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.new.user/group.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.new.user' name='user.new.user' owner='new.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='new.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='new.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.new.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.nd.user/user.nd.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
test-existing-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.new.user/group.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.new.user' name='user.new.user' owner='new.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='new.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='new.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.new.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.nd.user/user.nd.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
.... Checking user 1 > 
.... Checking user 2 > test.user
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
.... Checking user 1 > 
.... Checking user 2 > test.user
test-existing-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
.... Checking user 1 > test.user
.... Checking user 2 > test.user
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.new.user/group.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.new.user' name='user.new.user' owner='new.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='new.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='new.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.new.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
.... Checking user 1 > test.user
.... Checking user 2 > new.user
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.nd.user/user.nd.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
.... Checking user 1 > 
.... Checking user 2 > test.user
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
.... Checking user 1 > 
.... Checking user 2 > test.user
test-existing-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
.... Checking user 1 > test.user
.... Checking user 2 > test.user
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.new.user/group.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.new.user' name='user.new.user' owner='new.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='new.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='new.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.new.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
.... Checking user 1 > test.user
.... Checking user 2 > new.user
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.nd.user/user.nd.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
.... Checking user 1 > 
.... Checking user 2 > test.user
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
.... Checking user 1 > 
.... Checking user 2 > test.user
test-existing-login > Retrieved User > {:tag :user, :attrs {:id "test.user"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
.... Checking user 1 > test.user
.... Checking user 2 > test.user
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.new.user/group.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.new.user' name='user.new.user' owner='new.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='new.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='new.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.new.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
.... Checking user 1 > test.user
.... Checking user 2 > new.user
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.nd.user/user.nd.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user' password='testing'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user", :password "testing"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user' password='testing'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
test-existing-login > Retrieved User > {:tag :user, :attrs {:id "test.user", :password "testing"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.new.user/group.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.new.user' name='user.new.user' owner='new.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='new.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='new.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.new.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.nd.user/user.nd.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user' password='testing'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user' password='testing'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
test-existing-login > Retrieved User > {:tag :user, :attrs {:id "test.user", :password "testing"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.new.user/group.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.new.user' name='user.new.user' owner='new.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='new.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='new.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.new.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.nd.user/user.nd.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user' password='testing'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user' password='testing'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user' password='testing'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user", :password "testing"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user' password='testing'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
test-existing-login > Retrieved User > {:tag :user, :attrs {:id "test.user", :password "testing"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.new.user/group.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.new.user' name='user.new.user' owner='new.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='new.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='new.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.new.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.nd.user/user.nd.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user' password='testing'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user' password='testing'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user' password='testing'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user", :password "testing"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user' password='testing'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
test-existing-login > Retrieved User > {:tag :user, :attrs {:id "test.user", :password "testing"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.new.user/group.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.new.user' name='user.new.user' owner='new.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='new.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='new.user'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.new.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.new.user/user.new.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="new.user"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.nd.user/user.nd.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[] > result[]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user' password='testing'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user' password='testing'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/groups.aauth.groups/group.test.user/group.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<group id='user.test.user' name='user.test.user' owner='test.user'>
<user xmlns='com/interrupt/bookkeeping/users' id='test.user'/>
</group>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<user id='test.user' password='testing'/>
]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/groups.main.groups/group.test.user/bookkeeping.main.bookkeeping/bookkeeping.main.bookkeeping] > http-method[PUT] > header-hash[{"Content-Type" "text/xml", "Authorization" "Basic YWRtaW46"}] > xml-content[<?xml version='1.0' encoding='UTF-8'?>
<bookkeeping 
	xmlns='com/interrupt/bookkeeping'
	xmlns:account='com/interrupt/bookkeeping/account' 
	xmlns:journal='com/interrupt/bookkeeping/journal' 
	xmlns:currency='com/interrupt/bookkeeping/currency' 
	id='main.bookkeeping' > 
	
	
	
	<!--
		1. no 2 currencies can have the same 'id' 
		2. An account MUST specify in which currency it is denominated 
		3. Entry(s) should balance in the default currency unless otherwise specified 
		4. DebitPointer(s) / Debit(s) must be put in Account(s) of the same currency 
	--> 
	<currency:currencies id='main.currencies' default='CDN' > 
		<currency:currency id='CDN' name='Canadian Dollar' /> 
		<currency:currency id='USD' name='US Dollar' /> 
		<currency:currency id='BP' name='British Pound' /> 
		<currency:currency id='EUR' name='Euoropean Euro' /> 
		<currency:currency id='JPN' name='Japanese Yen' /> 
	</currency:currencies>
	
	
	<!-- 1. account types are: asset, liability, expense, revenue
	     2. each account has a given counter weight
		
		<account:account type="asset" 		id="" name="" counterWeight="debit" />
		<account:account type="expense" 	id="" name="" counterWeight="debit" />
		<account:account type="liability" 	id="" name="" counterWeight="credit"/>
		<account:account type="revenue" 	id="" name="" counterWeight="credit" />
	-->
	<account:accounts id='main.accounts' >  
	</account:accounts>  
	
	<journal:journals id='main.journals' >
	    <journal:journal id='generalledger' name='generalledger' type='' balance=''>  
			<journal:entries id='main.entries'  >  
			</journal:entries> 
	    </journal:journal>  
	</journal:journals>
</bookkeeping>

]
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
test-login > Retrieved User > {:tag :user, :attrs {:id "test.user", :password "testing"}, :content nil}
execute-embedded-db CALLED [xmldb:exist:///db/exist/rest/testDB/aauthentication.main.authentication/users.aauth.users/user.test.user/user.test.user] > http-method[GET] > header-hash[{"Content-Type" "text/xml"}] > xml-content[]
RESULT USER > type[class java.lang.String] > result[<user id="test.user" password="testing"/>]
 > 
 > 
clojure.core$str@11a2576caseAPrintCommand6: print ( < tim / > ) 
 > 
XML filtered[create ( <tim/> ) ]
