    /* This file was generated by SableCC (http://www.sablecc.org/). */

package com.interrupt.bookkeeping.cc.lexer;

import java.io.*;
import com.interrupt.bookkeeping.cc.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.BKEEPING;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            @SuppressWarnings("hiding") Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            @SuppressWarnings("hiding") Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            @SuppressWarnings("hiding") Token token = new37(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            @SuppressWarnings("hiding") Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            @SuppressWarnings("hiding") Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            @SuppressWarnings("hiding") Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            @SuppressWarnings("hiding") Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            @SuppressWarnings("hiding") Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            @SuppressWarnings("hiding") Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            @SuppressWarnings("hiding") Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            @SuppressWarnings("hiding") Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            @SuppressWarnings("hiding") Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            @SuppressWarnings("hiding") Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            @SuppressWarnings("hiding") Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            @SuppressWarnings("hiding") Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            @SuppressWarnings("hiding") Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            @SuppressWarnings("hiding") Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            @SuppressWarnings("hiding") Token token = new52(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            @SuppressWarnings("hiding") Token token = new53(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            @SuppressWarnings("hiding") Token token = new54(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            @SuppressWarnings("hiding") Token token = new55(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            @SuppressWarnings("hiding") Token token = new56(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            @SuppressWarnings("hiding") Token token = new57(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            @SuppressWarnings("hiding") Token token = new58(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            @SuppressWarnings("hiding") Token token = new59(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            @SuppressWarnings("hiding") Token token = new60(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            @SuppressWarnings("hiding") Token token = new61(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            @SuppressWarnings("hiding") Token token = new62(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            @SuppressWarnings("hiding") Token token = new63(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            @SuppressWarnings("hiding") Token token = new64(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            @SuppressWarnings("hiding") Token token = new65(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            @SuppressWarnings("hiding") Token token = new66(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            @SuppressWarnings("hiding") Token token = new67(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            @SuppressWarnings("hiding") Token token = new68(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            @SuppressWarnings("hiding") Token token = new69(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.FREETEXT; break;
                                case 1: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 70:
                        {
                            @SuppressWarnings("hiding") Token token = new70(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            switch(state.id())
                            {
                                case 0: state = State.FREETEXT; break;
                                case 1: state = State.BKEEPING; break;
                            }
                            return token;
                        }
                    case 71:
                        {
                            @SuppressWarnings("hiding") Token token = new71(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            @SuppressWarnings("hiding") Token token = new72(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            @SuppressWarnings("hiding") Token token = new73(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            @SuppressWarnings("hiding") Token token = new74(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            @SuppressWarnings("hiding") Token token = new75(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            @SuppressWarnings("hiding") Token token = new76(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVar(line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCreate(line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAdd(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUpdate(line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRemove(line, pos); }
    Token new5(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TReverse(line, pos); }
    Token new6(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFind(line, pos); }
    Token new7(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TList(line, pos); }
    Token new8(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPrint(line, pos); }
    Token new9(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCommit(line, pos); }
    Token new10(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLoad(line, pos); }
    Token new11(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLogin(line, pos); }
    Token new12(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLogout(line, pos); }
    Token new13(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TExit(line, pos); }
    Token new14(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSemicolon(text, line, pos); }
    Token new15(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhitespace(text, line, pos); }
    Token new16(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCommentLine(text, line, pos); }
    Token new17(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCommentBlock(text, line, pos); }
    Token new18(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEntryOpt(text, line, pos); }
    Token new19(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEntryidOpt(text, line, pos); }
    Token new20(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAccountOpt(text, line, pos); }
    Token new21(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAccountidOpt(text, line, pos); }
    Token new22(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TJournalOpt(text, line, pos); }
    Token new23(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNameOpt(text, line, pos); }
    Token new24(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTypeOpt(text, line, pos); }
    Token new25(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCounterweightOpt(text, line, pos); }
    Token new26(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAmountOpt(text, line, pos); }
    Token new27(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdOpt(text, line, pos); }
    Token new28(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEntrynumOpt(text, line, pos); }
    Token new29(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDateOpt(text, line, pos); }
    Token new30(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFileOpt(text, line, pos); }
    Token new31(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGroupOpt(text, line, pos); }
    Token new32(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUnameOpt(text, line, pos); }
    Token new33(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPasswdOpt(text, line, pos); }
    Token new34(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGroupidOpt(text, line, pos); }
    Token new35(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUseridOpt(text, line, pos); }
    Token new36(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCurrencyOpt(text, line, pos); }
    Token new37(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TReturninputOpt(text, line, pos); }
    Token new38(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSystemTok(line, pos); }
    Token new39(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDebitTok(line, pos); }
    Token new40(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCreditTok(line, pos); }
    Token new41(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEntryTok(line, pos); }
    Token new42(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEntriesTok(line, pos); }
    Token new43(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TJournalTok(line, pos); }
    Token new44(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TJournalsTok(line, pos); }
    Token new45(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTransactionTok(line, pos); }
    Token new46(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAccountTok(line, pos); }
    Token new47(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAccountsTok(line, pos); }
    Token new48(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUserTok(line, pos); }
    Token new49(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUsersTok(line, pos); }
    Token new50(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGroupTok(line, pos); }
    Token new51(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGroupsTok(line, pos); }
    Token new52(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAllowedactionsTok(line, pos); }
    Token new53(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TCommandTok(line, pos); }
    Token new54(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProfiledetailsTok(line, pos); }
    Token new55(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProfiledetailTok(line, pos); }
    Token new56(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TUsersessionTok(line, pos); }
    Token new57(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLparen(line, pos); }
    Token new58(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRparen(line, pos); }
    Token new59(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TListdelimiter(line, pos); }
    Token new60(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TExclamation(text, line, pos); }
    Token new61(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TQuestion(text, line, pos); }
    Token new62(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDoubledash(text, line, pos); }
    Token new63(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLbracket(text, line, pos); }
    Token new64(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRbracket(text, line, pos); }
    Token new65(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEquals(text, line, pos); }
    Token new66(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFslash(text, line, pos); }
    Token new67(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAtsign(text, line, pos); }
    Token new68(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TColon(text, line, pos); }
    Token new69(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TQuote(text, line, pos); }
    Token new70(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBackquote(line, pos); }
    Token new71(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWord(text, line, pos); }
    Token new72(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TXpathChars(text, line, pos); }
    Token new73(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TXmlns(line, pos); }
    Token new74(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDeclXml(line, pos); }
    Token new75(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDeclDtd(line, pos); }
    Token new76(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEoll(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();
        
        if( result == -1 || result == 59 )	// 59 being a semicolon
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // BKEEPING
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {39, 39, 7}, {40, 40, 8}, {41, 41, 9}, {44, 44, 10}, {45, 45, 11}, {46, 46, 12}, {47, 47, 13}, {48, 57, 14}, {58, 58, 15}, {59, 59, 16}, {60, 60, 17}, {61, 61, 18}, {62, 62, 19}, {63, 63, 20}, {64, 64, 21}, {65, 67, 22}, {68, 68, 23}, {69, 90, 22}, {91, 91, 24}, {93, 93, 25}, {95, 95, 26}, {96, 96, 27}, {97, 97, 28}, {98, 98, 29}, {99, 99, 30}, {100, 100, 31}, {101, 101, 32}, {102, 102, 33}, {103, 103, 34}, {104, 105, 29}, {106, 106, 35}, {107, 107, 29}, {108, 108, 36}, {109, 111, 29}, {112, 112, 37}, {113, 113, 29}, {114, 114, 38}, {115, 115, 39}, {116, 116, 40}, {117, 117, 41}, {118, 118, 42}, {119, 119, 29}, {120, 120, 43}, {121, 122, 29}, },
            {},
            {},
            {{10, 10, 44}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{45, 45, 45}, {46, 46, 12}, {48, 57, 14}, {65, 69, 22}, {70, 70, 46}, {71, 90, 22}, {95, 95, 26}, {97, 97, 47}, {98, 98, 29}, {99, 99, 48}, {100, 100, 49}, {101, 101, 50}, {102, 102, 29}, {103, 103, 51}, {104, 104, 29}, {105, 105, 52}, {106, 106, 53}, {107, 109, 29}, {110, 110, 54}, {111, 111, 29}, {112, 112, 55}, {113, 113, 29}, {114, 114, 56}, {115, 115, 29}, {116, 116, 57}, {117, 117, 58}, {118, 122, 29}, },
            {{45, 45, 59}, {46, 57, -13}, {65, 90, 22}, {95, 95, 26}, {97, 122, 29}, },
            {{42, 42, 60}, {47, 47, 61}, },
            {{45, 122, -14}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{45, 122, -14}, },
            {{45, 57, -14}, {65, 78, 22}, {79, 79, 62}, {80, 90, 22}, {95, 122, -14}, },
            {},
            {},
            {{45, 122, -14}, },
            {},
            {{45, 95, -14}, {97, 98, 29}, {99, 99, 63}, {100, 100, 64}, {101, 107, 29}, {108, 108, 65}, {109, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 95, -14}, {97, 110, 29}, {111, 111, 66}, {112, 113, 29}, {114, 114, 67}, {115, 122, 29}, },
            {{45, 95, -14}, {97, 100, 29}, {101, 101, 68}, {102, 122, 29}, },
            {{45, 95, -14}, {97, 109, 29}, {110, 110, 69}, {111, 119, 29}, {120, 120, 70}, {121, 122, 29}, },
            {{45, 95, -14}, {97, 104, 29}, {105, 105, 71}, {106, 122, 29}, },
            {{45, 95, -14}, {97, 113, 29}, {114, 114, 72}, {115, 122, 29}, },
            {{45, 110, -32}, {111, 111, 73}, {112, 122, 29}, },
            {{45, 104, -35}, {105, 105, 74}, {106, 110, 29}, {111, 111, 75}, {112, 122, 29}, },
            {{45, 113, -36}, {114, 114, 76}, {115, 122, 29}, },
            {{45, 100, -33}, {101, 101, 77}, {102, 122, 29}, },
            {{45, 95, -14}, {97, 120, 29}, {121, 121, 78}, {122, 122, 29}, },
            {{45, 113, -36}, {114, 114, 79}, {115, 122, 29}, },
            {{45, 95, -14}, {97, 111, 29}, {112, 112, 80}, {113, 114, 29}, {115, 115, 81}, {116, 122, 29}, },
            {{45, 95, -14}, {97, 97, 82}, {98, 122, 29}, },
            {{45, 95, -14}, {97, 108, 29}, {109, 109, 83}, {110, 122, 29}, },
            {},
            {{45, 122, -14}, },
            {{9, 9, 84}, {10, 10, 85}, {13, 13, 86}, {32, 32, 87}, {45, 122, -14}, },
            {{45, 98, -30}, {99, 99, 88}, {100, 108, 29}, {109, 109, 89}, {110, 122, 29}, },
            {{45, 110, -32}, {111, 111, 90}, {112, 116, 29}, {117, 117, 91}, {118, 122, 29}, },
            {{45, 95, -14}, {97, 97, 92}, {98, 122, 29}, },
            {{45, 109, -34}, {110, 110, 93}, {111, 122, 29}, },
            {{45, 113, -36}, {114, 114, 94}, {115, 122, 29}, },
            {{45, 95, -14}, {97, 99, 29}, {100, 100, 95}, {101, 122, 29}, },
            {{45, 110, -32}, {111, 111, 96}, {112, 122, 29}, },
            {{45, 95, -14}, {97, 97, 97}, {98, 122, 29}, },
            {{45, 95, -14}, {97, 97, 98}, {98, 122, 29}, },
            {{45, 100, -33}, {101, 101, 99}, {102, 122, 29}, },
            {{45, 120, -41}, {121, 121, 100}, {122, 122, 29}, },
            {{45, 95, -14}, {97, 114, 29}, {115, 115, 101}, {116, 122, 29}, },
            {{45, 122, -14}, },
            {{0, 41, 102}, {42, 42, 103}, {43, 127, 102}, },
            {{0, 9, 104}, {10, 10, 105}, {11, 12, 104}, {13, 13, 106}, {14, 127, 104}, },
            {{45, 57, -14}, {65, 66, 22}, {67, 67, 107}, {68, 90, 22}, {95, 122, -14}, },
            {{45, 98, -30}, {99, 99, 108}, {100, 122, 29}, },
            {{45, 99, -54}, {100, 100, 109}, {101, 122, 29}, },
            {{45, 95, -14}, {97, 107, 29}, {108, 108, 110}, {109, 122, 29}, },
            {{45, 108, -45}, {109, 109, 111}, {110, 122, 29}, },
            {{45, 100, -33}, {101, 101, 112}, {102, 122, 29}, },
            {{45, 95, -14}, {97, 97, 29}, {98, 98, 113}, {99, 122, 29}, },
            {{45, 95, -14}, {97, 115, 29}, {116, 116, 114}, {117, 122, 29}, },
            {{45, 104, -35}, {105, 105, 115}, {106, 122, 29}, },
            {{45, 109, -34}, {110, 110, 116}, {111, 122, 29}, },
            {{45, 110, -32}, {111, 111, 117}, {112, 122, 29}, },
            {{45, 95, -14}, {97, 116, 29}, {117, 117, 118}, {118, 122, 29}, },
            {{45, 114, -60}, {115, 115, 119}, {116, 122, 29}, },
            {{45, 95, -14}, {97, 97, 120}, {98, 102, 29}, {103, 103, 121}, {104, 122, 29}, },
            {{45, 104, -35}, {105, 105, 122}, {106, 110, 29}, {111, 111, 123}, {112, 122, 29}, },
            {{45, 108, -45}, {109, 109, 124}, {110, 117, 29}, {118, 118, 125}, {119, 122, 29}, },
            {{45, 114, -60}, {115, 115, 126}, {116, 122, 29}, },
            {{45, 95, -14}, {97, 97, 127}, {98, 122, 29}, },
            {{45, 99, -54}, {100, 100, 128}, {101, 122, 29}, },
            {{45, 100, -33}, {101, 101, 129}, {102, 122, 29}, },
            {{45, 113, -36}, {114, 114, 130}, {115, 122, 29}, },
            {{45, 107, -67}, {108, 108, 131}, {109, 122, 29}, },
            {{9, 32, -48}, {45, 45, 132}, {46, 46, 133}, {48, 57, 134}, {58, 58, 135}, {64, 64, 136}, {65, 90, 137}, {95, 95, 138}, {97, 122, 139}, },
            {{9, 122, -86}, },
            {{9, 9, 84}, {10, 10, 140}, {13, 122, -86}, },
            {{9, 122, -86}, },
            {{45, 98, -30}, {99, 99, 141}, {100, 122, 29}, },
            {{45, 110, -32}, {111, 111, 142}, {112, 122, 29}, },
            {{45, 116, -75}, {117, 117, 143}, {118, 122, 29}, },
            {{45, 113, -36}, {114, 114, 144}, {115, 122, 29}, },
            {{45, 115, -71}, {116, 116, 145}, {117, 122, 29}, },
            {{45, 115, -71}, {116, 116, 146}, {117, 122, 29}, },
            {{45, 110, -32}, {111, 111, 147}, {112, 122, 29}, },
            {{9, 9, 148}, {10, 10, 149}, {13, 13, 150}, {32, 32, 151}, {45, 122, -14}, },
            {{45, 116, -75}, {117, 117, 152}, {118, 122, 29}, },
            {{45, 108, -45}, {109, 109, 153}, {110, 122, 29}, },
            {{45, 114, -60}, {115, 115, 154}, {116, 122, 29}, },
            {{45, 115, -71}, {116, 116, 155}, {117, 122, 29}, },
            {{45, 111, -43}, {112, 112, 156}, {113, 122, 29}, },
            {{45, 100, -33}, {101, 101, 157}, {102, 122, 29}, },
            {{0, 127, -62}, },
            {{0, 42, -62}, {43, 46, 102}, {47, 47, 158}, {48, 127, 102}, },
            {{0, 127, -63}, },
            {{0, 127, -63}, },
            {{0, 9, 104}, {10, 10, 159}, {11, 127, -63}, },
            {{45, 57, -14}, {65, 83, 22}, {84, 84, 160}, {85, 90, 22}, {95, 122, -14}, },
            {{45, 110, -32}, {111, 111, 161}, {112, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 110, -32}, {111, 111, 162}, {112, 122, 29}, },
            {{45, 108, -45}, {109, 109, 163}, {110, 122, 29}, },
            {{45, 95, -14}, {97, 97, 164}, {98, 99, 29}, {100, 100, 165}, {101, 122, 29}, },
            {{45, 104, -35}, {105, 105, 166}, {106, 122, 29}, },
            {{45, 113, -36}, {114, 114, 167}, {115, 122, 29}, },
            {{45, 115, -71}, {116, 116, 168}, {117, 122, 29}, },
            {{45, 99, -54}, {100, 100, 169}, {101, 122, 29}, },
            {{45, 116, -75}, {117, 117, 170}, {118, 122, 29}, },
            {{45, 113, -36}, {114, 114, 171}, {115, 122, 29}, },
            {{45, 115, -71}, {116, 116, 172}, {117, 122, 29}, },
            {{45, 99, -54}, {100, 100, 173}, {101, 122, 29}, },
            {{45, 104, -35}, {105, 105, 174}, {106, 110, 29}, {111, 111, 175}, {112, 122, 29}, },
            {{45, 109, -34}, {110, 110, 176}, {111, 122, 29}, },
            {{45, 95, -14}, {97, 101, 29}, {102, 102, 177}, {103, 122, 29}, },
            {{45, 110, -32}, {111, 111, 178}, {112, 122, 29}, },
            {{45, 100, -33}, {101, 101, 179}, {102, 122, 29}, },
            {{45, 115, -71}, {116, 116, 180}, {117, 122, 29}, },
            {{45, 109, -34}, {110, 110, 181}, {111, 122, 29}, },
            {{45, 95, -14}, {97, 97, 182}, {98, 122, 29}, },
            {{45, 113, -36}, {114, 114, 183}, {115, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 109, -34}, {110, 110, 184}, {111, 122, 29}, },
            {{45, 122, -86}, },
            {{45, 122, -86}, },
            {{45, 122, -86}, },
            {{45, 122, -86}, },
            {{45, 122, -86}, },
            {{45, 122, -86}, },
            {{45, 122, -86}, },
            {{45, 122, -86}, },
            {{9, 122, -86}, },
            {{45, 110, -32}, {111, 111, 185}, {112, 122, 29}, },
            {{45, 116, -75}, {117, 117, 186}, {118, 122, 29}, },
            {{45, 109, -34}, {110, 110, 187}, {111, 122, 29}, },
            {{45, 113, -36}, {114, 114, 188}, {115, 122, 29}, },
            {{45, 100, -33}, {101, 101, 189}, {102, 122, 29}, },
            {{45, 113, -36}, {114, 114, 190}, {115, 122, 29}, },
            {{45, 116, -75}, {117, 117, 191}, {118, 122, 29}, },
            {{9, 32, -97}, {45, 45, 192}, {46, 46, 193}, {48, 57, 194}, {58, 58, 195}, {64, 64, 196}, {65, 90, 197}, {95, 95, 198}, {97, 122, 199}, },
            {{9, 122, -150}, },
            {{9, 9, 148}, {10, 10, 200}, {13, 122, -150}, },
            {{9, 122, -150}, },
            {{45, 113, -36}, {114, 114, 201}, {115, 122, 29}, },
            {{45, 100, -33}, {101, 101, 202}, {102, 122, 29}, },
            {{45, 114, -60}, {115, 115, 203}, {116, 122, 29}, },
            {{45, 116, -75}, {117, 117, 204}, {118, 122, 29}, },
            {{45, 100, -33}, {101, 101, 205}, {102, 122, 29}, },
            {{45, 113, -36}, {114, 114, 206}, {115, 122, 29}, },
            {{0, 127, -62}, },
            {{0, 127, -63}, },
            {{45, 57, -14}, {65, 88, 22}, {89, 89, 207}, {90, 90, 22}, {95, 122, -14}, },
            {{45, 116, -75}, {117, 117, 208}, {118, 122, 29}, },
            {{45, 95, -14}, {97, 118, 29}, {119, 119, 209}, {120, 122, 29}, },
            {{45, 95, -14}, {97, 97, 210}, {98, 104, 29}, {105, 105, 211}, {106, 122, 29}, },
            {{45, 115, -71}, {116, 116, 212}, {117, 122, 29}, },
            {{45, 104, -35}, {105, 105, 213}, {106, 122, 29}, },
            {{45, 115, -71}, {116, 116, 214}, {117, 122, 29}, },
            {{45, 104, -35}, {105, 105, 215}, {106, 120, 29}, {121, 121, 216}, {122, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 122, -14}, },
            {{45, 111, -43}, {112, 112, 217}, {113, 122, 29}, },
            {{45, 109, -34}, {110, 110, 218}, {111, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 122, -14}, },
            {{45, 109, -34}, {110, 110, 219}, {111, 122, 29}, },
            {{45, 116, -75}, {117, 117, 220}, {118, 122, 29}, },
            {{45, 115, -71}, {116, 116, 221}, {117, 122, 29}, },
            {{45, 104, -35}, {105, 105, 222}, {106, 122, 29}, },
            {{45, 95, -14}, {97, 117, 29}, {118, 118, 223}, {119, 122, 29}, },
            {{45, 113, -36}, {114, 114, 224}, {115, 122, 29}, },
            {{45, 100, -33}, {101, 101, 225}, {102, 122, 29}, },
            {{45, 114, -60}, {115, 115, 226}, {116, 122, 29}, },
            {{45, 115, -71}, {116, 116, 227}, {117, 122, 29}, },
            {{45, 57, -14}, {65, 82, 22}, {83, 83, 228}, {84, 90, 22}, {95, 114, -60}, {115, 115, 229}, {116, 122, 29}, },
            {{45, 114, -60}, {115, 115, 230}, {116, 122, 29}, },
            {{45, 116, -75}, {117, 117, 231}, {118, 122, 29}, },
            {{45, 109, -34}, {110, 110, 232}, {111, 122, 29}, },
            {{45, 115, -71}, {116, 116, 233}, {117, 122, 29}, },
            {{45, 100, -33}, {101, 101, 234}, {102, 122, 29}, },
            {{9, 9, 235}, {10, 10, 236}, {13, 13, 237}, {32, 32, 238}, {45, 122, -14}, },
            {{45, 120, -41}, {121, 121, 239}, {122, 122, 29}, },
            {{45, 111, -43}, {112, 112, 240}, {113, 122, 29}, },
            {{45, 122, -150}, },
            {{45, 122, -150}, },
            {{45, 122, -150}, },
            {{45, 122, -150}, },
            {{45, 122, -150}, },
            {{45, 122, -150}, },
            {{45, 122, -150}, },
            {{45, 122, -150}, },
            {{9, 122, -150}, },
            {{45, 109, -34}, {110, 110, 241}, {111, 122, 29}, },
            {{9, 9, 242}, {10, 10, 243}, {13, 13, 244}, {32, 32, 245}, {45, 122, -14}, },
            {{45, 118, -164}, {119, 119, 246}, {120, 122, 29}, },
            {{45, 113, -36}, {114, 114, 247}, {115, 122, 29}, },
            {{9, 9, 248}, {10, 10, 249}, {13, 13, 250}, {32, 32, 251}, {45, 122, -14}, },
            {{45, 104, -35}, {105, 105, 252}, {106, 109, 29}, {110, 110, 253}, {111, 122, 29}, },
            {{45, 57, -14}, {65, 79, 22}, {80, 80, 254}, {81, 90, 22}, {95, 122, -14}, },
            {{45, 109, -34}, {110, 110, 255}, {111, 122, 29}, },
            {{45, 100, -33}, {101, 101, 256}, {102, 122, 29}, },
            {{45, 109, -34}, {110, 110, 257}, {111, 122, 29}, },
            {{45, 115, -71}, {116, 116, 258}, {117, 122, 29}, },
            {{45, 100, -33}, {101, 101, 259}, {102, 122, 29}, },
            {{45, 115, -71}, {116, 116, 260}, {117, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 100, -33}, {101, 101, 261}, {102, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 114, -60}, {115, 115, 262}, {116, 122, 29}, },
            {{45, 95, -14}, {97, 97, 263}, {98, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 115, -71}, {116, 116, 264}, {117, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 107, -67}, {108, 108, 265}, {109, 122, 29}, },
            {{45, 100, -33}, {101, 101, 266}, {102, 122, 29}, },
            {{45, 114, -60}, {115, 115, 267}, {116, 122, 29}, },
            {{45, 108, -45}, {109, 109, 268}, {110, 122, 29}, },
            {{45, 95, -14}, {97, 97, 269}, {98, 122, 29}, },
            {{45, 100, -33}, {101, 101, 270}, {102, 122, 29}, },
            {{45, 100, -33}, {101, 101, 271}, {102, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 122, -14}, },
            {{45, 109, -34}, {110, 110, 272}, {111, 122, 29}, },
            {{45, 115, -71}, {116, 116, 273}, {117, 122, 29}, },
            {{45, 100, -33}, {101, 101, 274}, {102, 122, 29}, },
            {{45, 109, -34}, {110, 110, 275}, {111, 122, 29}, },
            {{9, 32, -191}, {48, 57, 276}, },
            {{9, 57, -237}, },
            {{9, 9, 235}, {10, 10, 277}, {13, 57, -237}, },
            {{9, 57, -237}, },
            {{9, 9, 278}, {10, 10, 279}, {13, 13, 280}, {32, 32, 281}, {45, 104, -35}, {105, 105, 282}, {106, 109, 29}, {110, 110, 283}, {111, 122, 29}, },
            {{9, 9, 284}, {10, 10, 285}, {13, 13, 286}, {32, 32, 287}, {45, 104, -35}, {105, 105, 288}, {106, 122, 29}, },
            {{45, 95, -14}, {97, 97, 289}, {98, 122, 29}, },
            {{9, 32, -204}, {45, 45, 290}, {46, 46, 291}, {48, 57, 292}, {58, 58, 293}, {64, 64, 294}, {65, 90, 295}, {95, 95, 296}, {97, 122, 297}, },
            {{9, 122, -244}, },
            {{9, 9, 242}, {10, 10, 298}, {13, 122, -244}, },
            {{9, 122, -244}, },
            {{45, 110, -32}, {111, 111, 299}, {112, 122, 29}, },
            {{45, 109, -34}, {110, 110, 300}, {111, 122, 29}, },
            {{9, 32, -207}, {45, 45, 301}, {46, 46, 302}, {48, 57, 303}, {58, 58, 304}, {64, 64, 305}, {65, 90, 306}, {95, 95, 307}, {97, 122, 308}, },
            {{9, 122, -250}, },
            {{9, 9, 248}, {10, 10, 309}, {13, 122, -250}, },
            {{9, 122, -250}, },
            {{45, 99, -54}, {100, 100, 310}, {101, 122, 29}, },
            {{45, 95, -14}, {97, 97, 311}, {98, 122, 29}, },
            {{45, 57, -14}, {65, 68, 22}, {69, 69, 312}, {70, 90, 22}, {95, 122, -14}, },
            {{45, 115, -71}, {116, 116, 313}, {117, 122, 29}, },
            {{45, 99, -54}, {100, 100, 314}, {101, 122, 29}, },
            {{45, 99, -54}, {100, 100, 315}, {101, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 122, -14}, },
            {{45, 122, -14}, },
            {{45, 114, -60}, {115, 115, 316}, {116, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 107, -67}, {108, 108, 317}, {109, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 100, -33}, {101, 101, 318}, {102, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 100, -33}, {101, 101, 319}, {102, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 98, -30}, {99, 99, 320}, {100, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 114, -60}, {115, 115, 321}, {116, 122, 29}, },
            {{45, 115, -71}, {116, 116, 322}, {117, 122, 29}, },
            {{9, 9, 323}, {10, 10, 324}, {13, 13, 325}, {32, 32, 326}, {45, 122, -14}, },
            {{45, 113, -36}, {114, 114, 327}, {115, 122, 29}, },
            {{45, 98, -30}, {99, 99, 328}, {100, 122, 29}, },
            {{47, 47, 329}, {48, 57, 276}, },
            {{9, 57, -237}, },
            {{9, 32, -241}, {45, 45, 330}, {46, 46, 331}, {48, 57, 332}, {58, 58, 333}, {64, 64, 334}, {65, 90, 335}, {95, 95, 336}, {97, 122, 337}, },
            {{9, 122, -280}, },
            {{9, 9, 278}, {10, 10, 338}, {13, 122, -280}, },
            {{9, 122, -280}, },
            {{45, 99, -54}, {100, 100, 339}, {101, 122, 29}, },
            {{45, 116, -75}, {117, 117, 340}, {118, 122, 29}, },
            {{9, 32, -242}, {45, 45, 341}, {46, 46, 342}, {48, 57, 343}, {58, 58, 344}, {64, 64, 345}, {65, 90, 346}, {95, 95, 347}, {97, 122, 348}, },
            {{9, 122, -286}, },
            {{9, 9, 284}, {10, 10, 349}, {13, 122, -286}, },
            {{9, 122, -286}, },
            {{45, 99, -54}, {100, 100, 350}, {101, 122, 29}, },
            {{45, 107, -67}, {108, 108, 351}, {109, 122, 29}, },
            {{45, 122, -244}, },
            {{45, 122, -244}, },
            {{45, 122, -244}, },
            {{45, 122, -244}, },
            {{45, 122, -244}, },
            {{45, 122, -244}, },
            {{45, 122, -244}, },
            {{45, 122, -244}, },
            {{9, 122, -244}, },
            {{45, 113, -36}, {114, 114, 352}, {115, 122, 29}, },
            {{45, 104, -35}, {105, 105, 353}, {106, 122, 29}, },
            {{45, 122, -250}, },
            {{45, 122, -250}, },
            {{45, 122, -250}, },
            {{45, 122, -250}, },
            {{45, 122, -250}, },
            {{45, 122, -250}, },
            {{45, 122, -250}, },
            {{45, 122, -250}, },
            {{9, 122, -250}, },
            {{9, 9, 354}, {10, 10, 355}, {13, 13, 356}, {32, 32, 357}, {45, 122, -14}, },
            {{45, 108, -45}, {109, 109, 358}, {110, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 114, -60}, {115, 115, 359}, {116, 122, 29}, },
            {{45, 57, -14}, {65, 65, 360}, {66, 90, 22}, {95, 122, -14}, },
            {{45, 122, -14}, },
            {{45, 122, -14}, },
            {{45, 114, -60}, {115, 115, 361}, {116, 122, 29}, },
            {{45, 57, -14}, {65, 67, 22}, {68, 68, 362}, {69, 90, 22}, {95, 122, -14}, },
            {{45, 122, -14}, },
            {{45, 115, -71}, {116, 116, 363}, {117, 122, 29}, },
            {{45, 114, -60}, {115, 115, 364}, {116, 122, 29}, },
            {{9, 9, 365}, {10, 10, 366}, {13, 13, 367}, {32, 32, 368}, {45, 104, -35}, {105, 105, 369}, {106, 122, 29}, },
            {{9, 32, -275}, {48, 57, 370}, },
            {{9, 57, -325}, },
            {{9, 9, 323}, {10, 10, 371}, {13, 57, -325}, },
            {{9, 57, -325}, },
            {{45, 57, -14}, {65, 86, 22}, {87, 87, 372}, {88, 90, 22}, {95, 122, -14}, },
            {{45, 120, -41}, {121, 121, 373}, {122, 122, 29}, },
            {{48, 57, 374}, },
            {{45, 122, -280}, },
            {{45, 122, -280}, },
            {{45, 122, -280}, },
            {{45, 122, -280}, },
            {{45, 122, -280}, },
            {{45, 122, -280}, },
            {{45, 122, -280}, },
            {{45, 122, -280}, },
            {{9, 122, -280}, },
            {{9, 9, 375}, {10, 10, 376}, {13, 13, 377}, {32, 32, 378}, {45, 122, -14}, },
            {{45, 108, -45}, {109, 109, 379}, {110, 122, 29}, },
            {{45, 122, -286}, },
            {{45, 122, -286}, },
            {{45, 122, -286}, },
            {{45, 122, -286}, },
            {{45, 122, -286}, },
            {{45, 122, -286}, },
            {{45, 122, -286}, },
            {{45, 122, -286}, },
            {{9, 122, -286}, },
            {{9, 9, 380}, {10, 10, 381}, {13, 13, 382}, {32, 32, 383}, {45, 122, -14}, },
            {{9, 9, 384}, {10, 10, 385}, {13, 13, 386}, {32, 32, 387}, {45, 122, -14}, },
            {{45, 99, -54}, {100, 100, 388}, {101, 122, 29}, },
            {{45, 109, -34}, {110, 110, 389}, {111, 122, 29}, },
            {{9, 32, -312}, {45, 45, 390}, {46, 46, 391}, {48, 57, 392}, {58, 58, 393}, {64, 64, 394}, {65, 90, 395}, {95, 95, 396}, {97, 122, 397}, },
            {{9, 122, -356}, },
            {{9, 9, 354}, {10, 10, 398}, {13, 122, -356}, },
            {{9, 122, -356}, },
            {{45, 100, -33}, {101, 101, 399}, {102, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 98, -30}, {99, 99, 400}, {100, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 100, -33}, {101, 101, 401}, {102, 122, 29}, },
            {{45, 104, -35}, {105, 105, 402}, {106, 122, 29}, },
            {{45, 104, -35}, {105, 105, 403}, {106, 122, 29}, },
            {{9, 32, -324}, {45, 45, 404}, {46, 46, 405}, {48, 57, 406}, {58, 58, 407}, {64, 64, 408}, {65, 90, 409}, {95, 95, 410}, {97, 122, 411}, },
            {{9, 122, -367}, },
            {{9, 9, 365}, {10, 10, 412}, {13, 122, -367}, },
            {{9, 122, -367}, },
            {{45, 99, -54}, {100, 100, 413}, {101, 122, 29}, },
            {{46, 46, 414}, {48, 57, 370}, },
            {{9, 57, -325}, },
            {{45, 100, -33}, {101, 101, 415}, {102, 122, 29}, },
            {{9, 9, 416}, {10, 10, 417}, {13, 13, 418}, {32, 32, 419}, {45, 122, -14}, },
            {{47, 47, 420}, {48, 57, 374}, },
            {{9, 32, -341}, {45, 45, 421}, {46, 46, 422}, {48, 57, 423}, {58, 58, 424}, {64, 64, 425}, {65, 90, 426}, {95, 95, 427}, {97, 122, 428}, },
            {{9, 122, -377}, },
            {{9, 9, 375}, {10, 10, 429}, {13, 122, -377}, },
            {{9, 122, -377}, },
            {{9, 9, 430}, {10, 10, 431}, {13, 13, 432}, {32, 32, 433}, {45, 122, -14}, },
            {{9, 32, -352}, {45, 45, 434}, {46, 46, 435}, {48, 57, 436}, {58, 58, 437}, {64, 64, 438}, {65, 90, 439}, {95, 95, 440}, {97, 122, 441}, },
            {{9, 122, -382}, },
            {{9, 9, 380}, {10, 10, 442}, {13, 122, -382}, },
            {{9, 122, -382}, },
            {{9, 32, -353}, {45, 45, 443}, {46, 46, 444}, {48, 57, 445}, {58, 58, 446}, {64, 64, 447}, {65, 90, 448}, {95, 95, 449}, {97, 122, 450}, },
            {{9, 122, -386}, },
            {{9, 9, 384}, {10, 10, 451}, {13, 122, -386}, },
            {{9, 122, -386}, },
            {{9, 9, 452}, {10, 10, 453}, {13, 13, 454}, {32, 32, 455}, {45, 122, -14}, },
            {{45, 111, -43}, {112, 112, 456}, {113, 122, 29}, },
            {{45, 122, -356}, },
            {{45, 122, -356}, },
            {{45, 122, -356}, },
            {{45, 122, -356}, },
            {{45, 122, -356}, },
            {{45, 122, -356}, },
            {{45, 122, -356}, },
            {{45, 122, -356}, },
            {{9, 122, -356}, },
            {{9, 9, 457}, {10, 10, 458}, {13, 13, 459}, {32, 32, 460}, {45, 122, -14}, },
            {{45, 115, -71}, {116, 116, 461}, {117, 122, 29}, },
            {{45, 115, -71}, {116, 116, 462}, {117, 122, 29}, },
            {{45, 110, -32}, {111, 111, 463}, {112, 122, 29}, },
            {{45, 110, -32}, {111, 111, 464}, {112, 122, 29}, },
            {{45, 122, -367}, },
            {{45, 122, -367}, },
            {{45, 122, -367}, },
            {{45, 122, -367}, },
            {{45, 122, -367}, },
            {{45, 122, -367}, },
            {{45, 122, -367}, },
            {{45, 122, -367}, },
            {{9, 122, -367}, },
            {{9, 9, 465}, {10, 10, 466}, {13, 13, 467}, {32, 32, 468}, {45, 122, -14}, },
            {{48, 57, 469}, },
            {{45, 104, -35}, {105, 105, 470}, {106, 122, 29}, },
            {{9, 32, -375}, {45, 45, 471}, {46, 46, 472}, {48, 57, 473}, {58, 58, 474}, {64, 64, 475}, {65, 90, 476}, {95, 95, 477}, {97, 122, 478}, },
            {{9, 122, -418}, },
            {{9, 9, 416}, {10, 10, 479}, {13, 122, -418}, },
            {{9, 122, -418}, },
            {{48, 57, 480}, },
            {{45, 122, -377}, },
            {{45, 122, -377}, },
            {{45, 122, -377}, },
            {{45, 122, -377}, },
            {{45, 122, -377}, },
            {{45, 122, -377}, },
            {{45, 122, -377}, },
            {{45, 122, -377}, },
            {{9, 122, -377}, },
            {{9, 32, -381}, {48, 57, 481}, },
            {{9, 57, -432}, },
            {{9, 9, 430}, {10, 10, 482}, {13, 57, -432}, },
            {{9, 57, -432}, },
            {{45, 122, -382}, },
            {{45, 122, -382}, },
            {{45, 122, -382}, },
            {{45, 122, -382}, },
            {{45, 122, -382}, },
            {{45, 122, -382}, },
            {{45, 122, -382}, },
            {{45, 122, -382}, },
            {{9, 122, -382}, },
            {{45, 122, -386}, },
            {{45, 122, -386}, },
            {{45, 122, -386}, },
            {{45, 122, -386}, },
            {{45, 122, -386}, },
            {{45, 122, -386}, },
            {{45, 122, -386}, },
            {{45, 122, -386}, },
            {{9, 122, -386}, },
            {{9, 32, -390}, {45, 45, 483}, {46, 46, 484}, {48, 57, 485}, {58, 58, 486}, {64, 64, 487}, {65, 90, 488}, {95, 95, 489}, {97, 122, 490}, },
            {{9, 122, -454}, },
            {{9, 9, 452}, {10, 10, 491}, {13, 122, -454}, },
            {{9, 122, -454}, },
            {{45, 116, -75}, {117, 117, 492}, {118, 122, 29}, },
            {{9, 32, -401}, {45, 45, 493}, {46, 46, 494}, {48, 57, 495}, {58, 58, 496}, {64, 64, 497}, {65, 90, 498}, {95, 95, 499}, {97, 122, 500}, },
            {{9, 122, -459}, },
            {{9, 9, 457}, {10, 10, 501}, {13, 122, -459}, },
            {{9, 122, -459}, },
            {{45, 104, -35}, {105, 105, 502}, {106, 122, 29}, },
            {{45, 95, -14}, {97, 97, 503}, {98, 122, 29}, },
            {{45, 109, -34}, {110, 110, 504}, {111, 122, 29}, },
            {{45, 109, -34}, {110, 110, 505}, {111, 122, 29}, },
            {{9, 32, -415}, {45, 45, 506}, {46, 46, 507}, {48, 57, 508}, {58, 58, 509}, {64, 64, 510}, {65, 90, 511}, {95, 95, 512}, {97, 122, 513}, },
            {{9, 122, -467}, },
            {{9, 9, 465}, {10, 10, 514}, {13, 122, -467}, },
            {{9, 122, -467}, },
            {{48, 57, 469}, },
            {{45, 95, -14}, {97, 102, 29}, {103, 103, 515}, {104, 122, 29}, },
            {{45, 122, -418}, },
            {{45, 122, -418}, },
            {{45, 122, -418}, },
            {{45, 122, -418}, },
            {{45, 122, -418}, },
            {{45, 122, -418}, },
            {{45, 122, -418}, },
            {{45, 122, -418}, },
            {{9, 122, -418}, },
            {{48, 57, 480}, },
            {{48, 57, 481}, },
            {{9, 57, -432}, },
            {{45, 122, -454}, },
            {{45, 122, -454}, },
            {{45, 122, -454}, },
            {{45, 122, -454}, },
            {{45, 122, -454}, },
            {{45, 122, -454}, },
            {{45, 122, -454}, },
            {{45, 122, -454}, },
            {{9, 122, -454}, },
            {{45, 115, -71}, {116, 116, 516}, {117, 122, 29}, },
            {{45, 122, -459}, },
            {{45, 122, -459}, },
            {{45, 122, -459}, },
            {{45, 122, -459}, },
            {{45, 122, -459}, },
            {{45, 122, -459}, },
            {{45, 122, -459}, },
            {{45, 122, -459}, },
            {{9, 122, -459}, },
            {{45, 110, -32}, {111, 111, 517}, {112, 122, 29}, },
            {{45, 104, -35}, {105, 105, 518}, {106, 122, 29}, },
            {{45, 122, -14}, },
            {{45, 122, -14}, },
            {{45, 122, -467}, },
            {{45, 122, -467}, },
            {{45, 122, -467}, },
            {{45, 122, -467}, },
            {{45, 122, -467}, },
            {{45, 122, -467}, },
            {{45, 122, -467}, },
            {{45, 122, -467}, },
            {{9, 122, -467}, },
            {{45, 95, -14}, {97, 103, 29}, {104, 104, 519}, {105, 122, 29}, },
            {{9, 9, 520}, {10, 10, 521}, {13, 13, 522}, {32, 32, 523}, {45, 122, -14}, },
            {{45, 109, -34}, {110, 110, 524}, {111, 122, 29}, },
            {{45, 107, -67}, {108, 108, 525}, {109, 122, 29}, },
            {{45, 115, -71}, {116, 116, 526}, {117, 122, 29}, },
            {{9, 32, -518}, {45, 45, 527}, {46, 46, 528}, {48, 57, 529}, {58, 58, 530}, {64, 64, 531}, {65, 90, 532}, {95, 95, 533}, {97, 122, 534}, },
            {{9, 122, -522}, },
            {{9, 9, 520}, {10, 10, 535}, {13, 122, -522}, },
            {{9, 122, -522}, },
            {{45, 114, -60}, {115, 115, 536}, {116, 122, 29}, },
            {{45, 114, -60}, {115, 115, 537}, {116, 122, 29}, },
            {{9, 9, 538}, {10, 10, 539}, {13, 13, 540}, {32, 32, 541}, {45, 122, -14}, },
            {{45, 122, -522}, },
            {{45, 122, -522}, },
            {{45, 122, -522}, },
            {{45, 122, -522}, },
            {{45, 122, -522}, },
            {{45, 122, -522}, },
            {{45, 122, -522}, },
            {{45, 122, -522}, },
            {{9, 122, -522}, },
            {{45, 122, -14}, },
            {{45, 122, -14}, },
            {{9, 32, -528}, {97, 122, 542}, },
            {{9, 122, -540}, },
            {{9, 9, 538}, {10, 10, 543}, {13, 122, -540}, },
            {{9, 122, -540}, },
            {{97, 122, 542}, },
            {{9, 122, -540}, },
        }
        { // FREETEXT
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {39, 39, 7}, {40, 40, 8}, {41, 41, 9}, {44, 44, 10}, {45, 45, 11}, {46, 46, 12}, {47, 47, 13}, {48, 57, 14}, {58, 58, 15}, {60, 60, 16}, {61, 61, 17}, {62, 62, 18}, {63, 63, 19}, {64, 64, 20}, {65, 67, 21}, {68, 68, 22}, {69, 90, 21}, {91, 91, 23}, {93, 93, 24}, {95, 95, 25}, {96, 96, 26}, {97, 97, 27}, {98, 98, 28}, {99, 99, 29}, {100, 100, 30}, {101, 101, 31}, {102, 102, 28}, {103, 103, 32}, {104, 105, 28}, {106, 106, 33}, {107, 111, 28}, {112, 112, 34}, {113, 114, 28}, {115, 115, 35}, {116, 116, 36}, {117, 117, 37}, {118, 119, 28}, {120, 120, 38}, {121, 122, 28}, },
            {},
            {},
            {{10, 10, 39}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{45, 45, 40}, {46, 46, 12}, {48, 57, 14}, {65, 69, 21}, {70, 70, 41}, {71, 90, 21}, {95, 95, 25}, {97, 97, 42}, {98, 98, 28}, {99, 99, 43}, {100, 100, 44}, {101, 101, 45}, {102, 102, 28}, {103, 103, 46}, {104, 104, 28}, {105, 105, 47}, {106, 106, 48}, {107, 109, 28}, {110, 110, 49}, {111, 111, 28}, {112, 112, 50}, {113, 113, 28}, {114, 114, 51}, {115, 115, 28}, {116, 116, 52}, {117, 117, 53}, {118, 122, 28}, },
            {{45, 45, 54}, {46, 57, -13}, {65, 90, 21}, {95, 95, 25}, {97, 122, 28}, },
            {{42, 42, 55}, {47, 47, 56}, },
            {{45, 122, -14}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {{45, 122, -14}, },
            {{45, 57, -14}, {65, 78, 21}, {79, 79, 57}, {80, 90, 21}, {95, 122, -14}, },
            {},
            {},
            {{45, 122, -14}, },
            {},
            {{45, 95, -14}, {97, 98, 28}, {99, 99, 58}, {100, 107, 28}, {108, 108, 59}, {109, 122, 28}, },
            {{45, 122, -14}, },
            {{45, 95, -14}, {97, 110, 28}, {111, 111, 60}, {112, 113, 28}, {114, 114, 61}, {115, 122, 28}, },
            {{45, 95, -14}, {97, 100, 28}, {101, 101, 62}, {102, 122, 28}, },
            {{45, 95, -14}, {97, 109, 28}, {110, 110, 63}, {111, 122, 28}, },
            {{45, 95, -14}, {97, 113, 28}, {114, 114, 64}, {115, 122, 28}, },
            {{45, 110, -31}, {111, 111, 65}, {112, 122, 28}, },
            {{45, 113, -34}, {114, 114, 66}, {115, 122, 28}, },
            {{45, 95, -14}, {97, 120, 28}, {121, 121, 67}, {122, 122, 28}, },
            {{45, 113, -34}, {114, 114, 68}, {115, 122, 28}, },
            {{45, 95, -14}, {97, 114, 28}, {115, 115, 69}, {116, 122, 28}, },
            {{45, 95, -14}, {97, 108, 28}, {109, 109, 70}, {110, 122, 28}, },
            {},
            {{45, 122, -14}, },
            {{9, 9, 71}, {10, 10, 72}, {13, 13, 73}, {32, 32, 74}, {45, 122, -14}, },
            {{45, 98, -29}, {99, 99, 75}, {100, 108, 28}, {109, 109, 76}, {110, 122, 28}, },
            {{45, 110, -31}, {111, 111, 77}, {112, 116, 28}, {117, 117, 78}, {118, 122, 28}, },
            {{45, 95, -14}, {97, 97, 79}, {98, 122, 28}, },
            {{45, 109, -33}, {110, 110, 80}, {111, 122, 28}, },
            {{45, 113, -34}, {114, 114, 81}, {115, 122, 28}, },
            {{45, 95, -14}, {97, 99, 28}, {100, 100, 82}, {101, 122, 28}, },
            {{45, 110, -31}, {111, 111, 83}, {112, 122, 28}, },
            {{45, 95, -14}, {97, 97, 84}, {98, 122, 28}, },
            {{45, 95, -14}, {97, 97, 85}, {98, 122, 28}, },
            {{45, 100, -32}, {101, 101, 86}, {102, 122, 28}, },
            {{45, 120, -37}, {121, 121, 87}, {122, 122, 28}, },
            {{45, 114, -39}, {115, 115, 88}, {116, 122, 28}, },
            {{45, 122, -14}, },
            {{0, 41, 89}, {42, 42, 90}, {43, 127, 89}, },
            {{0, 9, 91}, {10, 10, 92}, {11, 12, 91}, {13, 13, 93}, {14, 127, 91}, },
            {{45, 57, -14}, {65, 66, 21}, {67, 67, 94}, {68, 90, 21}, {95, 122, -14}, },
            {{45, 98, -29}, {99, 99, 95}, {100, 122, 28}, },
            {{45, 95, -14}, {97, 107, 28}, {108, 108, 96}, {109, 122, 28}, },
            {{45, 108, -40}, {109, 109, 97}, {110, 122, 28}, },
            {{45, 100, -32}, {101, 101, 98}, {102, 122, 28}, },
            {{45, 95, -14}, {97, 97, 28}, {98, 98, 99}, {99, 122, 28}, },
            {{45, 95, -14}, {97, 115, 28}, {116, 116, 100}, {117, 122, 28}, },
            {{45, 110, -31}, {111, 111, 101}, {112, 122, 28}, },
            {{45, 95, -14}, {97, 116, 28}, {117, 117, 102}, {118, 122, 28}, },
            {{45, 110, -31}, {111, 111, 103}, {112, 122, 28}, },
            {{45, 114, -39}, {115, 115, 104}, {116, 122, 28}, },
            {{45, 95, -14}, {97, 97, 105}, {98, 122, 28}, },
            {{45, 100, -32}, {101, 101, 106}, {102, 122, 28}, },
            {{45, 107, -61}, {108, 108, 107}, {109, 122, 28}, },
            {{9, 32, -43}, {45, 45, 108}, {46, 46, 109}, {48, 57, 110}, {58, 58, 111}, {64, 64, 112}, {65, 90, 113}, {95, 95, 114}, {97, 122, 115}, },
            {{9, 122, -73}, },
            {{9, 9, 71}, {10, 10, 116}, {13, 122, -73}, },
            {{9, 122, -73}, },
            {{45, 98, -29}, {99, 99, 117}, {100, 122, 28}, },
            {{45, 110, -31}, {111, 111, 118}, {112, 122, 28}, },
            {{45, 116, -67}, {117, 117, 119}, {118, 122, 28}, },
            {{45, 113, -34}, {114, 114, 120}, {115, 122, 28}, },
            {{45, 115, -65}, {116, 116, 121}, {117, 122, 28}, },
            {{45, 115, -65}, {116, 116, 122}, {117, 122, 28}, },
            {{45, 110, -31}, {111, 111, 123}, {112, 122, 28}, },
            {{9, 9, 124}, {10, 10, 125}, {13, 13, 126}, {32, 32, 127}, {45, 122, -14}, },
            {{45, 116, -67}, {117, 117, 128}, {118, 122, 28}, },
            {{45, 108, -40}, {109, 109, 129}, {110, 122, 28}, },
            {{45, 114, -39}, {115, 115, 130}, {116, 122, 28}, },
            {{45, 115, -65}, {116, 116, 131}, {117, 122, 28}, },
            {{45, 95, -14}, {97, 111, 28}, {112, 112, 132}, {113, 122, 28}, },
            {{45, 100, -32}, {101, 101, 133}, {102, 122, 28}, },
            {{0, 127, -57}, },
            {{0, 42, -57}, {43, 46, 89}, {47, 47, 134}, {48, 127, 89}, },
            {{0, 127, -58}, },
            {{0, 127, -58}, },
            {{0, 9, 91}, {10, 10, 135}, {11, 127, -58}, },
            {{45, 57, -14}, {65, 83, 21}, {84, 84, 136}, {85, 90, 21}, {95, 122, -14}, },
            {{45, 110, -31}, {111, 111, 137}, {112, 122, 28}, },
            {{45, 110, -31}, {111, 111, 138}, {112, 122, 28}, },
            {{45, 108, -40}, {109, 109, 139}, {110, 122, 28}, },
            {{45, 99, -49}, {100, 100, 140}, {101, 122, 28}, },
            {{45, 95, -14}, {97, 104, 28}, {105, 105, 141}, {106, 122, 28}, },
            {{45, 113, -34}, {114, 114, 142}, {115, 122, 28}, },
            {{45, 116, -67}, {117, 117, 143}, {118, 122, 28}, },
            {{45, 113, -34}, {114, 114, 144}, {115, 122, 28}, },
            {{45, 95, -14}, {97, 101, 28}, {102, 102, 145}, {103, 122, 28}, },
            {{45, 115, -65}, {116, 116, 146}, {117, 122, 28}, },
            {{45, 109, -33}, {110, 110, 147}, {111, 122, 28}, },
            {{45, 113, -34}, {114, 114, 148}, {115, 122, 28}, },
            {{45, 109, -33}, {110, 110, 149}, {111, 122, 28}, },
            {{45, 122, -73}, },
            {{45, 122, -73}, },
            {{45, 122, -73}, },
            {{45, 122, -73}, },
            {{45, 122, -73}, },
            {{45, 122, -73}, },
            {{45, 122, -73}, },
            {{45, 122, -73}, },
            {{9, 122, -73}, },
            {{45, 110, -31}, {111, 111, 150}, {112, 122, 28}, },
            {{45, 116, -67}, {117, 117, 151}, {118, 122, 28}, },
            {{45, 109, -33}, {110, 110, 152}, {111, 122, 28}, },
            {{45, 113, -34}, {114, 114, 153}, {115, 122, 28}, },
            {{45, 100, -32}, {101, 101, 154}, {102, 122, 28}, },
            {{45, 113, -34}, {114, 114, 155}, {115, 122, 28}, },
            {{45, 116, -67}, {117, 117, 156}, {118, 122, 28}, },
            {{9, 32, -84}, {45, 45, 157}, {46, 46, 158}, {48, 57, 159}, {58, 58, 160}, {64, 64, 161}, {65, 90, 162}, {95, 95, 163}, {97, 122, 164}, },
            {{9, 122, -126}, },
            {{9, 9, 124}, {10, 10, 165}, {13, 122, -126}, },
            {{9, 122, -126}, },
            {{45, 113, -34}, {114, 114, 166}, {115, 122, 28}, },
            {{45, 100, -32}, {101, 101, 167}, {102, 122, 28}, },
            {{45, 114, -39}, {115, 115, 168}, {116, 122, 28}, },
            {{45, 116, -67}, {117, 117, 169}, {118, 122, 28}, },
            {{45, 100, -32}, {101, 101, 170}, {102, 122, 28}, },
            {{45, 113, -34}, {114, 114, 171}, {115, 122, 28}, },
            {{0, 127, -57}, },
            {{0, 127, -58}, },
            {{45, 57, -14}, {65, 88, 21}, {89, 89, 172}, {90, 90, 21}, {95, 122, -14}, },
            {{45, 116, -67}, {117, 117, 173}, {118, 122, 28}, },
            {{45, 95, -14}, {97, 118, 28}, {119, 119, 174}, {120, 122, 28}, },
            {{45, 95, -14}, {97, 97, 175}, {98, 122, 28}, },
            {{45, 104, -101}, {105, 105, 176}, {106, 122, 28}, },
            {{45, 115, -65}, {116, 116, 177}, {117, 122, 28}, },
            {{45, 104, -101}, {105, 105, 178}, {106, 120, 28}, {121, 121, 179}, {122, 122, 28}, },
            {{45, 111, -89}, {112, 112, 180}, {113, 122, 28}, },
            {{45, 109, -33}, {110, 110, 181}, {111, 122, 28}, },
            {{45, 104, -101}, {105, 105, 182}, {106, 122, 28}, },
            {{45, 100, -32}, {101, 101, 183}, {102, 122, 28}, },
            {{45, 114, -39}, {115, 115, 184}, {116, 122, 28}, },
            {{45, 57, -14}, {65, 82, 21}, {83, 83, 185}, {84, 90, 21}, {95, 114, -39}, {115, 115, 186}, {116, 122, 28}, },
            {{45, 114, -39}, {115, 115, 187}, {116, 122, 28}, },
            {{45, 116, -67}, {117, 117, 188}, {118, 122, 28}, },
            {{45, 109, -33}, {110, 110, 189}, {111, 122, 28}, },
            {{45, 115, -65}, {116, 116, 190}, {117, 122, 28}, },
            {{45, 100, -32}, {101, 101, 191}, {102, 122, 28}, },
            {{9, 9, 192}, {10, 10, 193}, {13, 13, 194}, {32, 32, 195}, {45, 122, -14}, },
            {{45, 120, -37}, {121, 121, 196}, {122, 122, 28}, },
            {{45, 111, -89}, {112, 112, 197}, {113, 122, 28}, },
            {{45, 122, -126}, },
            {{45, 122, -126}, },
            {{45, 122, -126}, },
            {{45, 122, -126}, },
            {{45, 122, -126}, },
            {{45, 122, -126}, },
            {{45, 122, -126}, },
            {{45, 122, -126}, },
            {{9, 122, -126}, },
            {{45, 109, -33}, {110, 110, 198}, {111, 122, 28}, },
            {{9, 9, 199}, {10, 10, 200}, {13, 13, 201}, {32, 32, 202}, {45, 122, -14}, },
            {{45, 118, -140}, {119, 119, 203}, {120, 122, 28}, },
            {{45, 113, -34}, {114, 114, 204}, {115, 122, 28}, },
            {{9, 9, 205}, {10, 10, 206}, {13, 13, 207}, {32, 32, 208}, {45, 122, -14}, },
            {{45, 104, -101}, {105, 105, 209}, {106, 109, 28}, {110, 110, 210}, {111, 122, 28}, },
            {{45, 57, -14}, {65, 79, 21}, {80, 80, 211}, {81, 90, 21}, {95, 122, -14}, },
            {{45, 109, -33}, {110, 110, 212}, {111, 122, 28}, },
            {{45, 100, -32}, {101, 101, 213}, {102, 122, 28}, },
            {{45, 109, -33}, {110, 110, 214}, {111, 122, 28}, },
            {{45, 115, -65}, {116, 116, 215}, {117, 122, 28}, },
            {{45, 122, -14}, },
            {{45, 100, -32}, {101, 101, 216}, {102, 122, 28}, },
            {{45, 122, -14}, },
            {{45, 114, -39}, {115, 115, 217}, {116, 122, 28}, },
            {{45, 95, -14}, {97, 97, 218}, {98, 122, 28}, },
            {{45, 107, -61}, {108, 108, 219}, {109, 122, 28}, },
            {{45, 108, -40}, {109, 109, 220}, {110, 122, 28}, },
            {{45, 95, -14}, {97, 97, 221}, {98, 122, 28}, },
            {{45, 100, -32}, {101, 101, 222}, {102, 122, 28}, },
            {{45, 122, -14}, },
            {{45, 122, -14}, },
            {{45, 109, -33}, {110, 110, 223}, {111, 122, 28}, },
            {{45, 115, -65}, {116, 116, 224}, {117, 122, 28}, },
            {{45, 100, -32}, {101, 101, 225}, {102, 122, 28}, },
            {{45, 109, -33}, {110, 110, 226}, {111, 122, 28}, },
            {{9, 32, -156}, {48, 57, 227}, },
            {{9, 57, -194}, },
            {{9, 9, 192}, {10, 10, 228}, {13, 57, -194}, },
            {{9, 57, -194}, },
            {{9, 9, 229}, {10, 10, 230}, {13, 13, 231}, {32, 32, 232}, {45, 104, -101}, {105, 105, 233}, {106, 109, 28}, {110, 110, 234}, {111, 122, 28}, },
            {{9, 9, 235}, {10, 10, 236}, {13, 13, 237}, {32, 32, 238}, {45, 104, -101}, {105, 105, 239}, {106, 122, 28}, },
            {{45, 95, -14}, {97, 97, 240}, {98, 122, 28}, },
            {{9, 32, -169}, {45, 45, 241}, {46, 46, 242}, {48, 57, 243}, {58, 58, 244}, {64, 64, 245}, {65, 90, 246}, {95, 95, 247}, {97, 122, 248}, },
            {{9, 122, -201}, },
            {{9, 9, 199}, {10, 10, 249}, {13, 122, -201}, },
            {{9, 122, -201}, },
            {{45, 110, -31}, {111, 111, 250}, {112, 122, 28}, },
            {{45, 109, -33}, {110, 110, 251}, {111, 122, 28}, },
            {{9, 32, -172}, {45, 45, 252}, {46, 46, 253}, {48, 57, 254}, {58, 58, 255}, {64, 64, 256}, {65, 90, 257}, {95, 95, 258}, {97, 122, 259}, },
            {{9, 122, -207}, },
            {{9, 9, 205}, {10, 10, 260}, {13, 122, -207}, },
            {{9, 122, -207}, },
            {{45, 99, -49}, {100, 100, 261}, {101, 122, 28}, },
            {{45, 95, -14}, {97, 97, 262}, {98, 122, 28}, },
            {{45, 57, -14}, {65, 68, 21}, {69, 69, 263}, {70, 90, 21}, {95, 122, -14}, },
            {{45, 115, -65}, {116, 116, 264}, {117, 122, 28}, },
            {{45, 99, -49}, {100, 100, 265}, {101, 122, 28}, },
            {{45, 99, -49}, {100, 100, 266}, {101, 122, 28}, },
            {{45, 122, -14}, },
            {{45, 114, -39}, {115, 115, 267}, {116, 122, 28}, },
            {{45, 122, -14}, },
            {{45, 107, -61}, {108, 108, 268}, {109, 122, 28}, },
            {{45, 100, -32}, {101, 101, 269}, {102, 122, 28}, },
            {{45, 122, -14}, },
            {{45, 98, -29}, {99, 99, 270}, {100, 122, 28}, },
            {{45, 114, -39}, {115, 115, 271}, {116, 122, 28}, },
            {{45, 115, -65}, {116, 116, 272}, {117, 122, 28}, },
            {{9, 9, 273}, {10, 10, 274}, {13, 13, 275}, {32, 32, 276}, {45, 122, -14}, },
            {{45, 113, -34}, {114, 114, 277}, {115, 122, 28}, },
            {{45, 98, -29}, {99, 99, 278}, {100, 122, 28}, },
            {{47, 47, 279}, {48, 57, 227}, },
            {{9, 57, -194}, },
            {{9, 32, -198}, {45, 45, 280}, {46, 46, 281}, {48, 57, 282}, {58, 58, 283}, {64, 64, 284}, {65, 90, 285}, {95, 95, 286}, {97, 122, 287}, },
            {{9, 122, -231}, },
            {{9, 9, 229}, {10, 10, 288}, {13, 122, -231}, },
            {{9, 122, -231}, },
            {{45, 99, -49}, {100, 100, 289}, {101, 122, 28}, },
            {{45, 116, -67}, {117, 117, 290}, {118, 122, 28}, },
            {{9, 32, -199}, {45, 45, 291}, {46, 46, 292}, {48, 57, 293}, {58, 58, 294}, {64, 64, 295}, {65, 90, 296}, {95, 95, 297}, {97, 122, 298}, },
            {{9, 122, -237}, },
            {{9, 9, 235}, {10, 10, 299}, {13, 122, -237}, },
            {{9, 122, -237}, },
            {{45, 99, -49}, {100, 100, 300}, {101, 122, 28}, },
            {{45, 107, -61}, {108, 108, 301}, {109, 122, 28}, },
            {{45, 122, -201}, },
            {{45, 122, -201}, },
            {{45, 122, -201}, },
            {{45, 122, -201}, },
            {{45, 122, -201}, },
            {{45, 122, -201}, },
            {{45, 122, -201}, },
            {{45, 122, -201}, },
            {{9, 122, -201}, },
            {{45, 113, -34}, {114, 114, 302}, {115, 122, 28}, },
            {{45, 104, -101}, {105, 105, 303}, {106, 122, 28}, },
            {{45, 122, -207}, },
            {{45, 122, -207}, },
            {{45, 122, -207}, },
            {{45, 122, -207}, },
            {{45, 122, -207}, },
            {{45, 122, -207}, },
            {{45, 122, -207}, },
            {{45, 122, -207}, },
            {{9, 122, -207}, },
            {{9, 9, 304}, {10, 10, 305}, {13, 13, 306}, {32, 32, 307}, {45, 122, -14}, },
            {{45, 108, -40}, {109, 109, 308}, {110, 122, 28}, },
            {{45, 122, -14}, },
            {{45, 114, -39}, {115, 115, 309}, {116, 122, 28}, },
            {{45, 57, -14}, {65, 65, 310}, {66, 90, 21}, {95, 122, -14}, },
            {{45, 122, -14}, },
            {{45, 122, -14}, },
            {{45, 114, -39}, {115, 115, 311}, {116, 122, 28}, },
            {{45, 57, -14}, {65, 67, 21}, {68, 68, 312}, {69, 90, 21}, {95, 122, -14}, },
            {{45, 115, -65}, {116, 116, 313}, {117, 122, 28}, },
            {{45, 114, -39}, {115, 115, 314}, {116, 122, 28}, },
            {{9, 9, 315}, {10, 10, 316}, {13, 13, 317}, {32, 32, 318}, {45, 104, -101}, {105, 105, 319}, {106, 122, 28}, },
            {{9, 32, -226}, {48, 57, 320}, },
            {{9, 57, -275}, },
            {{9, 9, 273}, {10, 10, 321}, {13, 57, -275}, },
            {{9, 57, -275}, },
            {{45, 57, -14}, {65, 86, 21}, {87, 87, 322}, {88, 90, 21}, {95, 122, -14}, },
            {{45, 120, -37}, {121, 121, 323}, {122, 122, 28}, },
            {{48, 57, 324}, },
            {{45, 122, -231}, },
            {{45, 122, -231}, },
            {{45, 122, -231}, },
            {{45, 122, -231}, },
            {{45, 122, -231}, },
            {{45, 122, -231}, },
            {{45, 122, -231}, },
            {{45, 122, -231}, },
            {{9, 122, -231}, },
            {{9, 9, 325}, {10, 10, 326}, {13, 13, 327}, {32, 32, 328}, {45, 122, -14}, },
            {{45, 108, -40}, {109, 109, 329}, {110, 122, 28}, },
            {{45, 122, -237}, },
            {{45, 122, -237}, },
            {{45, 122, -237}, },
            {{45, 122, -237}, },
            {{45, 122, -237}, },
            {{45, 122, -237}, },
            {{45, 122, -237}, },
            {{45, 122, -237}, },
            {{9, 122, -237}, },
            {{9, 9, 330}, {10, 10, 331}, {13, 13, 332}, {32, 32, 333}, {45, 122, -14}, },
            {{9, 9, 334}, {10, 10, 335}, {13, 13, 336}, {32, 32, 337}, {45, 122, -14}, },
            {{45, 99, -49}, {100, 100, 338}, {101, 122, 28}, },
            {{45, 109, -33}, {110, 110, 339}, {111, 122, 28}, },
            {{9, 32, -263}, {45, 45, 340}, {46, 46, 341}, {48, 57, 342}, {58, 58, 343}, {64, 64, 344}, {65, 90, 345}, {95, 95, 346}, {97, 122, 347}, },
            {{9, 122, -306}, },
            {{9, 9, 304}, {10, 10, 348}, {13, 122, -306}, },
            {{9, 122, -306}, },
            {{45, 100, -32}, {101, 101, 349}, {102, 122, 28}, },
            {{45, 122, -14}, },
            {{45, 98, -29}, {99, 99, 350}, {100, 122, 28}, },
            {{45, 122, -14}, },
            {{45, 100, -32}, {101, 101, 351}, {102, 122, 28}, },
            {{45, 104, -101}, {105, 105, 352}, {106, 122, 28}, },
            {{45, 104, -101}, {105, 105, 353}, {106, 122, 28}, },
            {{9, 32, -274}, {45, 45, 354}, {46, 46, 355}, {48, 57, 356}, {58, 58, 357}, {64, 64, 358}, {65, 90, 359}, {95, 95, 360}, {97, 122, 361}, },
            {{9, 122, -317}, },
            {{9, 9, 315}, {10, 10, 362}, {13, 122, -317}, },
            {{9, 122, -317}, },
            {{45, 99, -49}, {100, 100, 363}, {101, 122, 28}, },
            {{46, 46, 364}, {48, 57, 320}, },
            {{9, 57, -275}, },
            {{45, 100, -32}, {101, 101, 365}, {102, 122, 28}, },
            {{9, 9, 366}, {10, 10, 367}, {13, 13, 368}, {32, 32, 369}, {45, 122, -14}, },
            {{47, 47, 370}, {48, 57, 324}, },
            {{9, 32, -291}, {45, 45, 371}, {46, 46, 372}, {48, 57, 373}, {58, 58, 374}, {64, 64, 375}, {65, 90, 376}, {95, 95, 377}, {97, 122, 378}, },
            {{9, 122, -327}, },
            {{9, 9, 325}, {10, 10, 379}, {13, 122, -327}, },
            {{9, 122, -327}, },
            {{9, 9, 380}, {10, 10, 381}, {13, 13, 382}, {32, 32, 383}, {45, 122, -14}, },
            {{9, 32, -302}, {45, 45, 384}, {46, 46, 385}, {48, 57, 386}, {58, 58, 387}, {64, 64, 388}, {65, 90, 389}, {95, 95, 390}, {97, 122, 391}, },
            {{9, 122, -332}, },
            {{9, 9, 330}, {10, 10, 392}, {13, 122, -332}, },
            {{9, 122, -332}, },
            {{9, 32, -303}, {45, 45, 393}, {46, 46, 394}, {48, 57, 395}, {58, 58, 396}, {64, 64, 397}, {65, 90, 398}, {95, 95, 399}, {97, 122, 400}, },
            {{9, 122, -336}, },
            {{9, 9, 334}, {10, 10, 401}, {13, 122, -336}, },
            {{9, 122, -336}, },
            {{9, 9, 402}, {10, 10, 403}, {13, 13, 404}, {32, 32, 405}, {45, 122, -14}, },
            {{45, 111, -89}, {112, 112, 406}, {113, 122, 28}, },
            {{45, 122, -306}, },
            {{45, 122, -306}, },
            {{45, 122, -306}, },
            {{45, 122, -306}, },
            {{45, 122, -306}, },
            {{45, 122, -306}, },
            {{45, 122, -306}, },
            {{45, 122, -306}, },
            {{9, 122, -306}, },
            {{9, 9, 407}, {10, 10, 408}, {13, 13, 409}, {32, 32, 410}, {45, 122, -14}, },
            {{45, 115, -65}, {116, 116, 411}, {117, 122, 28}, },
            {{45, 115, -65}, {116, 116, 412}, {117, 122, 28}, },
            {{45, 110, -31}, {111, 111, 413}, {112, 122, 28}, },
            {{45, 110, -31}, {111, 111, 414}, {112, 122, 28}, },
            {{45, 122, -317}, },
            {{45, 122, -317}, },
            {{45, 122, -317}, },
            {{45, 122, -317}, },
            {{45, 122, -317}, },
            {{45, 122, -317}, },
            {{45, 122, -317}, },
            {{45, 122, -317}, },
            {{9, 122, -317}, },
            {{9, 9, 415}, {10, 10, 416}, {13, 13, 417}, {32, 32, 418}, {45, 122, -14}, },
            {{48, 57, 419}, },
            {{45, 104, -101}, {105, 105, 420}, {106, 122, 28}, },
            {{9, 32, -325}, {45, 45, 421}, {46, 46, 422}, {48, 57, 423}, {58, 58, 424}, {64, 64, 425}, {65, 90, 426}, {95, 95, 427}, {97, 122, 428}, },
            {{9, 122, -368}, },
            {{9, 9, 366}, {10, 10, 429}, {13, 122, -368}, },
            {{9, 122, -368}, },
            {{48, 57, 430}, },
            {{45, 122, -327}, },
            {{45, 122, -327}, },
            {{45, 122, -327}, },
            {{45, 122, -327}, },
            {{45, 122, -327}, },
            {{45, 122, -327}, },
            {{45, 122, -327}, },
            {{45, 122, -327}, },
            {{9, 122, -327}, },
            {{9, 32, -331}, {48, 57, 431}, },
            {{9, 57, -382}, },
            {{9, 9, 380}, {10, 10, 432}, {13, 57, -382}, },
            {{9, 57, -382}, },
            {{45, 122, -332}, },
            {{45, 122, -332}, },
            {{45, 122, -332}, },
            {{45, 122, -332}, },
            {{45, 122, -332}, },
            {{45, 122, -332}, },
            {{45, 122, -332}, },
            {{45, 122, -332}, },
            {{9, 122, -332}, },
            {{45, 122, -336}, },
            {{45, 122, -336}, },
            {{45, 122, -336}, },
            {{45, 122, -336}, },
            {{45, 122, -336}, },
            {{45, 122, -336}, },
            {{45, 122, -336}, },
            {{45, 122, -336}, },
            {{9, 122, -336}, },
            {{9, 32, -340}, {45, 45, 433}, {46, 46, 434}, {48, 57, 435}, {58, 58, 436}, {64, 64, 437}, {65, 90, 438}, {95, 95, 439}, {97, 122, 440}, },
            {{9, 122, -404}, },
            {{9, 9, 402}, {10, 10, 441}, {13, 122, -404}, },
            {{9, 122, -404}, },
            {{45, 116, -67}, {117, 117, 442}, {118, 122, 28}, },
            {{9, 32, -351}, {45, 45, 443}, {46, 46, 444}, {48, 57, 445}, {58, 58, 446}, {64, 64, 447}, {65, 90, 448}, {95, 95, 449}, {97, 122, 450}, },
            {{9, 122, -409}, },
            {{9, 9, 407}, {10, 10, 451}, {13, 122, -409}, },
            {{9, 122, -409}, },
            {{45, 104, -101}, {105, 105, 452}, {106, 122, 28}, },
            {{45, 95, -14}, {97, 97, 453}, {98, 122, 28}, },
            {{45, 109, -33}, {110, 110, 454}, {111, 122, 28}, },
            {{45, 109, -33}, {110, 110, 455}, {111, 122, 28}, },
            {{9, 32, -365}, {45, 45, 456}, {46, 46, 457}, {48, 57, 458}, {58, 58, 459}, {64, 64, 460}, {65, 90, 461}, {95, 95, 462}, {97, 122, 463}, },
            {{9, 122, -417}, },
            {{9, 9, 415}, {10, 10, 464}, {13, 122, -417}, },
            {{9, 122, -417}, },
            {{48, 57, 419}, },
            {{45, 95, -14}, {97, 102, 28}, {103, 103, 465}, {104, 122, 28}, },
            {{45, 122, -368}, },
            {{45, 122, -368}, },
            {{45, 122, -368}, },
            {{45, 122, -368}, },
            {{45, 122, -368}, },
            {{45, 122, -368}, },
            {{45, 122, -368}, },
            {{45, 122, -368}, },
            {{9, 122, -368}, },
            {{48, 57, 430}, },
            {{48, 57, 431}, },
            {{9, 57, -382}, },
            {{45, 122, -404}, },
            {{45, 122, -404}, },
            {{45, 122, -404}, },
            {{45, 122, -404}, },
            {{45, 122, -404}, },
            {{45, 122, -404}, },
            {{45, 122, -404}, },
            {{45, 122, -404}, },
            {{9, 122, -404}, },
            {{45, 115, -65}, {116, 116, 466}, {117, 122, 28}, },
            {{45, 122, -409}, },
            {{45, 122, -409}, },
            {{45, 122, -409}, },
            {{45, 122, -409}, },
            {{45, 122, -409}, },
            {{45, 122, -409}, },
            {{45, 122, -409}, },
            {{45, 122, -409}, },
            {{9, 122, -409}, },
            {{45, 110, -31}, {111, 111, 467}, {112, 122, 28}, },
            {{45, 104, -101}, {105, 105, 468}, {106, 122, 28}, },
            {{45, 122, -14}, },
            {{45, 122, -14}, },
            {{45, 122, -417}, },
            {{45, 122, -417}, },
            {{45, 122, -417}, },
            {{45, 122, -417}, },
            {{45, 122, -417}, },
            {{45, 122, -417}, },
            {{45, 122, -417}, },
            {{45, 122, -417}, },
            {{9, 122, -417}, },
            {{45, 95, -14}, {97, 103, 28}, {104, 104, 469}, {105, 122, 28}, },
            {{9, 9, 470}, {10, 10, 471}, {13, 13, 472}, {32, 32, 473}, {45, 122, -14}, },
            {{45, 109, -33}, {110, 110, 474}, {111, 122, 28}, },
            {{45, 107, -61}, {108, 108, 475}, {109, 122, 28}, },
            {{45, 115, -65}, {116, 116, 476}, {117, 122, 28}, },
            {{9, 32, -468}, {45, 45, 477}, {46, 46, 478}, {48, 57, 479}, {58, 58, 480}, {64, 64, 481}, {65, 90, 482}, {95, 95, 483}, {97, 122, 484}, },
            {{9, 122, -472}, },
            {{9, 9, 470}, {10, 10, 485}, {13, 122, -472}, },
            {{9, 122, -472}, },
            {{45, 114, -39}, {115, 115, 486}, {116, 122, 28}, },
            {{45, 114, -39}, {115, 115, 487}, {116, 122, 28}, },
            {{9, 9, 488}, {10, 10, 489}, {13, 13, 490}, {32, 32, 491}, {45, 122, -14}, },
            {{45, 122, -472}, },
            {{45, 122, -472}, },
            {{45, 122, -472}, },
            {{45, 122, -472}, },
            {{45, 122, -472}, },
            {{45, 122, -472}, },
            {{45, 122, -472}, },
            {{45, 122, -472}, },
            {{9, 122, -472}, },
            {{45, 122, -14}, },
            {{45, 122, -14}, },
            {{9, 32, -478}, {97, 122, 492}, },
            {{9, 122, -490}, },
            {{9, 9, 488}, {10, 10, 493}, {13, 122, -490}, },
            {{9, 122, -490}, },
            {{97, 122, 492}, },
            {{9, 122, -490}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // BKEEPING
        {14, 15, 15, 15, 15, 60, 69, 69, 63, 64, 59, 71, 71, 66, 71, 68, 14, 57, 65, 58, 61, 67, 71, 71, 72, 72, 71, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 15, 62, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, -1, -1, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 30, 30, 30, 30, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, -1, -1, -1, 16, 16, 71, 71, 2, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 0, 71, 30, 30, 30, 30, 30, 30, 30, 30, 30, 71, 71, 71, 71, 71, 71, 71, 27, 27, 27, 27, 71, 71, 71, 71, 71, 71, 17, 16, 71, 71, 71, 71, 71, 71, 71, 71, 13, 6, 71, 71, 7, 10, 71, 71, 71, 71, 71, 71, 71, 71, 71, 48, 71, 71, 71, 71, 71, 71, 71, 71, 27, 27, 27, 27, 27, 27, 27, 27, 27, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 39, 71, 41, 50, 71, 11, 71, 8, 71, 71, 71, 71, 71, 71, 71, 49, 71, 71, 71, 71, 71, -1, -1, -1, -1, 71, 71, 71, 23, 23, 23, 23, 71, 71, 24, 24, 24, 24, 71, 71, 71, 71, 71, 71, 9, 1, 40, 71, 51, 71, 12, 71, 4, 71, 38, 71, 3, 71, 71, 71, 71, 71, -1, -1, 18, 18, 18, 18, 71, 71, 31, 31, 31, 31, 71, 71, 23, 23, 23, 23, 23, 23, 23, 23, 23, 71, 71, 24, 24, 24, 24, 24, 24, 24, 24, 24, 71, 71, 71, 46, 71, 53, 42, 43, 71, 5, 71, 71, 71, -1, -1, -1, -1, 71, 71, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 71, 71, 31, 31, 31, 31, 31, 31, 31, 31, 31, 71, 71, 71, 71, 35, 35, 35, 35, 71, 47, 71, 44, 71, 71, 71, 20, 20, 20, 20, 71, -1, -1, 71, 71, -1, 19, 19, 19, 19, 71, 34, 34, 34, 34, 22, 22, 22, 22, 71, 71, 35, 35, 35, 35, 35, 35, 35, 35, 35, 71, 71, 71, 71, 71, 20, 20, 20, 20, 20, 20, 20, 20, 20, 71, -1, 71, 36, 36, 36, 36, -1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 28, 28, 28, 28, 34, 34, 34, 34, 34, 34, 34, 34, 34, 22, 22, 22, 22, 22, 22, 22, 22, 22, 33, 33, 33, 33, 71, 32, 32, 32, 32, 71, 71, 71, 71, 21, 21, 21, 21, 26, 71, 36, 36, 36, 36, 36, 36, 36, 36, 36, 29, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 71, 32, 32, 32, 32, 32, 32, 32, 32, 32, 71, 71, 45, 56, 21, 21, 21, 21, 21, 21, 21, 21, 21, 71, 71, 71, 71, 71, 37, 37, 37, 37, 71, 55, 71, 37, 37, 37, 37, 37, 37, 37, 37, 37, 52, 54, -1, -1, -1, -1, 25, -1, },
        // FREETEXT
        {76, 15, 15, 15, 15, 60, 69, 69, 63, 64, 59, 71, 71, 66, 71, 68, 57, 65, 58, 61, 67, 71, 71, 72, 72, 71, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 15, 62, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, -1, -1, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 30, 30, 30, 30, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, -1, -1, -1, 16, 16, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 30, 30, 30, 30, 30, 30, 30, 30, 30, 71, 71, 71, 71, 71, 71, 71, 27, 27, 27, 27, 71, 71, 71, 71, 71, 71, 17, 16, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 48, 71, 71, 71, 71, 71, 71, 71, 71, 27, 27, 27, 27, 27, 27, 27, 27, 27, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 39, 71, 41, 50, 71, 71, 71, 71, 71, 49, 71, 71, 71, 71, 71, -1, -1, -1, -1, 71, 71, 71, 23, 23, 23, 23, 71, 71, 24, 24, 24, 24, 71, 71, 71, 71, 71, 71, 40, 71, 51, 71, 71, 38, 71, 71, 71, 71, 71, 71, -1, -1, 18, 18, 18, 18, 71, 71, 31, 31, 31, 31, 71, 71, 23, 23, 23, 23, 23, 23, 23, 23, 23, 71, 71, 24, 24, 24, 24, 24, 24, 24, 24, 24, 71, 71, 71, 46, 71, 53, 42, 43, 71, 71, 71, 71, -1, -1, -1, -1, 71, 71, -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 71, 71, 31, 31, 31, 31, 31, 31, 31, 31, 31, 71, 71, 71, 71, 35, 35, 35, 35, 71, 47, 71, 44, 71, 71, 71, 20, 20, 20, 20, 71, -1, -1, 71, 71, -1, 19, 19, 19, 19, 71, 34, 34, 34, 34, 22, 22, 22, 22, 71, 71, 35, 35, 35, 35, 35, 35, 35, 35, 35, 71, 71, 71, 71, 71, 20, 20, 20, 20, 20, 20, 20, 20, 20, 71, -1, 71, 36, 36, 36, 36, -1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 28, 28, 28, 28, 34, 34, 34, 34, 34, 34, 34, 34, 34, 22, 22, 22, 22, 22, 22, 22, 22, 22, 33, 33, 33, 33, 71, 32, 32, 32, 32, 71, 71, 71, 71, 21, 21, 21, 21, 26, 71, 36, 36, 36, 36, 36, 36, 36, 36, 36, 29, 28, 28, 33, 33, 33, 33, 33, 33, 33, 33, 33, 71, 32, 32, 32, 32, 32, 32, 32, 32, 32, 71, 71, 45, 56, 21, 21, 21, 21, 21, 21, 21, 21, 21, 71, 71, 71, 71, 71, 37, 37, 37, 37, 71, 55, 71, 37, 37, 37, 37, 37, 37, 37, 37, 37, 52, 54, -1, -1, -1, -1, 25, -1, },

    };*/

    public static class State
    {
        public final static State BKEEPING = new State(0);
        public final static State FREETEXT = new State(1);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
